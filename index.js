const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

const bot = new Telegraf(BOT_TOKEN);

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
const citiesAreasPath = path.join(__dirname, 'db', 'cities-areas.json');
const timesDir = path.join(__dirname, 'db', 'cities-areas');

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤
let citiesAreasData = { cities: [], areas: [] };
try {
  if (fs.existsSync(citiesAreasPath)) {
    const data = fs.readFileSync(citiesAreasPath, 'utf8');
    citiesAreasData = JSON.parse(data);
  } else {
    console.warn('–§–∞–π–ª cities-areas.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (e) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cities-areas.json:', e);
}

// –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤
const russianToEnglishMonth = {
  —è–Ω–≤–∞—Ä—å: 'January',
  —Ñ–µ–≤—Ä–∞–ª—å: 'February',
  –º–∞—Ä—Ç: 'March',
  –∞–ø—Ä–µ–ª—å: 'April',
  –º–∞–π: 'May',
  –∏—é–Ω—å: 'June',
  –∏—é–ª—å: 'July',
  –∞–≤–≥—É—Å—Ç: 'August',
  —Å–µ–Ω—Ç—è–±—Ä—å: 'September',
  –æ–∫—Ç—è–±—Ä—å: 'October',
  –Ω–æ—è–±—Ä—å: 'November',
  –¥–µ–∫–∞–±—Ä—å: 'December'
};

function getEnglishMonthName(ruMonth) {
  if (ruMonth === 'now') {
    const now = new Date();
    return now.toLocaleString('en-GB', { month: 'long' });
  }
  const lower = ruMonth.toLowerCase().trim();
  return russianToEnglishMonth[lower] || null;
}

function getRussianMonthName(enMonth) {
  const entry = Object.entries(russianToEnglishMonth).find(([_, en]) => en === enMonth);
  return entry ? entry[0] : enMonth;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º—ë–Ω –ø–æ ID
function loadTimesById(id) {
  const filePath = path.join(timesDir, `${id}.json`);
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    } else {
      console.log(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return null;
    }
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, e);
    return null;
  }
}

// –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
function fmt(time) {
  return time && Array.isArray(time) && time.length >= 2
    ? `${String(time[0]).padStart(2, '0')}:${String(time[1]).padStart(2, '0')}`
    : '--:--';
}

// –í—Ä–µ–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
function getPrayerTimesForToday(timesData) {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const monthRu = now.toLocaleString('ru-RU', { month: 'long' });
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;
  const dayData = monthData[day];
  if (!dayData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${day} ${monthRuCap}`;

  return `
üìÖ ${day} ${monthRuCap}
üèô –§–∞–¥–∂—Ä: ${fmt(dayData.Fajr)}
üåÖ –í–æ—Å—Ö–æ–¥: ${fmt(dayData.Sunrise)}
üåá –ó—É—Ö—Ä: ${fmt(dayData.Dhuhr)}
üåÜ –ê—Å—Ä: ${fmt(dayData.Asr)}
üèô –ú–∞–≥—Ä–∏–±: ${fmt(dayData.Maghrib)}
üåÉ –ò—à–∞: ${fmt(dayData.Isha)}
  `.trim();
}

// –¢–∞–±–ª–∏—Ü–∞ –Ω–∞ –º–µ—Å—è—Ü
function getPrayerTimesTableForMonth(timesData, monthEn) {
  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;
  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const dayW = 4;
  const timeW = 5;

  let header = `–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ ${monthRuCap}\n`;
  let colHeader = `<pre>` +
    '–î–µ–Ω—å'.padEnd(dayW, ' ') + '‚îÇ' +
    '–§–∞–¥–∂—Ä'.padEnd(timeW, ' ') + '‚îÇ' +
    '–í–æ—Å—Ö.'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ó—É—Ö—Ä'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ê—Å—Ä'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ú–∞–≥—Ä.'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ò—à–∞'.padEnd(timeW, ' ') + '\n' +
    ''.padEnd(dayW + 1 + timeW * 6 + 6, '‚îÄ') + '\n';

  let body = '';
  for (let d = 1; d <= 31; d++) {
    const dayStr = String(d).padStart(2, '0');
    const dayData = monthData[dayStr];
    let row = d.toString().padEnd(dayW, ' ') + '‚îÇ';
    if (dayData) {
      row += fmt(dayData.Fajr).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Sunrise).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Dhuhr).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Asr).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Maghrib).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Isha).padEnd(timeW, ' ');
    } else {
      row += ''.padEnd((timeW + 1) * 6 - 1, ' ');
    }
    body += row + '\n';
  }

  return header + colHeader + body + '</pre>';
}

// –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤
function getMonthsList(locationId) {
  const ruMonths = Object.keys(russianToEnglishMonth);
  const keyboard = [];
  for (let i = 0; i < ruMonths.length; i += 3) {
    const row = ruMonths.slice(i, i + 3).map(m => ({
      text: m.charAt(0).toUpperCase() + m.slice(1),
      callback_data: `select_month_${m}_${locationId}`
    }));
    keyboard.push(row);
  }
  keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `back_to_loc_${locationId}` }]);
  return { reply_markup: { inline_keyboard: keyboard } };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
function getLocationMenu(locationId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üïå –î–µ–Ω—å', callback_data: `day_${locationId}` }],
        [{ text: 'üìÖ –ú–µ—Å—è—Ü', callback_data: `month_${locationId}` }],
        [{ text: 'üóìÔ∏è –ì–æ–¥', callback_data: `year_${locationId}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]
      ]
    }
  };
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üèô –ì–æ—Ä–æ–¥–∞', callback_data: 'cmd_cities' }],
      [{ text: 'üèò –†–∞–π–æ–Ω—ã', callback_data: 'cmd_areas' }],
      [{ text: 'üí¨ –•–∞–¥–∏—Å', callback_data: 'cmd_quote' }]
    ]
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const usersFilePath = path.join(__dirname, 'users.json');
let users = new Set();

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const data = fs.readFileSync(usersFilePath, 'utf8');
      const loaded = JSON.parse(data);
      users = new Set(loaded);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json:', e);
  }
}

function saveUsers() {
  try {
    fs.writeFileSync(usersFilePath, JSON.stringify([...users]), 'utf8');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json:', e);
  }
}

function addUser(userId) {
  const id = userId.toString();
  if (!users.has(id)) {
    users.add(id);
    saveUsers();
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id}. –í—Å–µ–≥–æ: ${users.size}`);
  }
}

// –•–∞–¥–∏—Å
const quotes = require('./quotes.json');
function getRandomQuote() {
  return quotes[Math.floor(Math.random() * quotes.length)];
}

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.start((ctx) => {
  addUser(ctx.from.id);
  ctx.reply('üìÖ‚è∞ –†—É–∑–Ω–∞–º–∞ - –ö—É—Ä–∞—Ö—Å–∫–∏–π —Ä–∞–π–æ–Ω\n¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏ –∏ –∞–ª—å-–•–∞–∫–∏–º)\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:', mainMenu);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  try {
    await ctx.answerCbQuery();
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å answerCbQuery:', e);
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (data === 'cmd_cities_areas') {
    return await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ:', mainMenu.reply_markup);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞
  if (data === 'cmd_cities') {
    const citiesList = citiesAreasData.cities
      .map(c => `üèô <b>${c.name_cities}</b>`)
      .join('\n');
    const keyboard = citiesAreasData.cities.map(c => [
      { text: c.name_cities, callback_data: `loc_${c.id}` }
    ]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);
    await ctx.editMessageText(`<b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:</b>\n\n${citiesList}`, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–π–æ–Ω—ã
  if (data === 'cmd_areas') {
    const areasList = citiesAreasData.areas
      .map(a => `üèò <b>${a.name_areas}</b>`)
      .join('\n');
    const keyboard = citiesAreasData.areas.map(a => [
      { text: a.name_areas, callback_data: `loc_${a.id}` }
    ]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);
    await ctx.editMessageText(`<b>–°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤:</b>\n\n${areasList}`, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // –í—ã–±–æ—Ä –º–µ—Å—Ç–∞
  if (data.startsWith('loc_')) {
    const id = data.split('_')[1];
    const all = [...citiesAreasData.cities, ...citiesAreasData.areas];
    const loc = all.find(l => l.id == id);
    if (!loc) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText(
        `‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è "${loc.name_cities || loc.name_areas}"`,
        mainMenu
      );
    }

    const name = loc.name_cities || loc.name_areas;
    await ctx.editMessageText(
      `üìç –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>${name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // –í—Ä–µ–º—è –Ω–∞ –¥–µ–Ω—å
  if (data.startsWith('day_')) {
    const id = data.split('_')[1];
    const timesData = loadTimesById(id);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    const msg = getPrayerTimesForToday(timesData);
    const loc = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    const name = loc ? (loc.name_cities || loc.name_areas) : '–ú–µ—Å—Ç–æ';
    await ctx.editMessageText(
      `üìç <b>${name}</b>\n\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // –í—Ä–µ–º—è –Ω–∞ –º–µ—Å—è—Ü
  if (data.startsWith('month_') && !data.includes('select_month')) {
    const id = data.split('_')[1];
    const timesData = loadTimesById(id);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    const monthEn = getEnglishMonthName('now');
    const msg = getPrayerTimesTableForMonth(timesData, monthEn);
    const loc = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    const name = loc ? (loc.name_cities || loc.name_areas) : '–ú–µ—Å—Ç–æ';
    await ctx.editMessageText(
      `üìç <b>${name}</b>\n\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // –ì–æ–¥ ‚Äî –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
  if (data.startsWith('year_')) {
    const id = data.split('_')[1];
    await ctx.editMessageText('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList(id));
  }

  // –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ "–ì–æ–¥"
  if (data.startsWith('select_month_')) {
    const parts = data.split('_');
    const ruMonth = parts[2];
    const locationId = parts[3];
    const enMonth = getEnglishMonthName(ruMonth);
    if (!enMonth) {
      return await ctx.editMessageText('‚ùå –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.', getLocationMenu(locationId));
    }

    const timesData = loadTimesById(locationId);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');

    const msg = getPrayerTimesTableForMonth(timesData, enMonth);
    const loc = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == locationId);
    const name = loc ? (loc.name_cities || loc.name_areas) : '–ú–µ—Å—Ç–æ';
    await ctx.editMessageText(
      `üìç <b>${name}</b>\n\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(locationId)
      }
    );
  }

  // –ù–∞–∑–∞–¥ –∫ –º–µ—Å—Ç—É
  if (data.startsWith('back_to_loc_')) {
    const id = data.split('_')[3];
    const loc = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    const name = loc ? (loc.name_cities || loc.name_areas) : '–ú–µ—Å—Ç–æ';
    await ctx.editMessageText(
      `üìç –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>${name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // –•–∞–¥–∏—Å
  if (data === 'cmd_quote') {
    const q = getRandomQuote();
    await ctx.editMessageText(`‚ùù ${q.text} ‚ùû\n‚Äî ${q.author}`, mainMenu);
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadUsers();

// Vercel Webhook
module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    res.status(405).send('Method Not Allowed');
    return;
  }
  let body = '';
  req.on('data', chunk => body += chunk.toString());
  req.on('end', async () => {
    try {
      const update = JSON.parse(body);
      await bot.handleUpdate(update);
      res.status(200).send('OK');
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update:', e);
      res.status(500).send('Error');
    }
  });
};

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if (process.env.NODE_ENV !== 'production') {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
}