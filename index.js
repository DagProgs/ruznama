/**
 * üïå –†—É–∑–Ω–∞–º–∞ ‚Äî –ë–æ—Ç –≤—Ä–µ–º—ë–Ω –Ω–∞–º–∞–∑–æ–≤
 *
 * @author Developer
 * @license MIT
 * @version 1.4.0 (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)
 */
import { Telegraf } from 'telegraf';
import fs from 'fs';
import path from 'path';

// ========================================================
// üõë –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê
// ========================================================
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}

const bot = new Telegraf(BOT_TOKEN);

// ========================================================
// üìÅ –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú
// ========================================================
const citiesAreasPath = path.join(process.cwd(), 'db', 'cities-areas.json');
const timesDir = path.join(process.cwd(), 'db', 'cities-areas');
const usersFilePath = path.join(process.cwd(), 'users.json');

// ========================================================
// üåç –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: –ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã
// ========================================================
let citiesAreasData = { cities: [], areas: [] };
try {
  if (fs.existsSync(citiesAreasPath)) {
    citiesAreasData = JSON.parse(fs.readFileSync(citiesAreasPath, 'utf8'));
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${citiesAreasData.cities.length} –≥–æ—Ä–æ–¥–æ–≤ –∏ ${citiesAreasData.areas.length} —Ä–∞–π–æ–Ω–æ–≤`);
  } else {
    console.warn('‚ö†Ô∏è –§–∞–π–ª cities-areas.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (e) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cities-areas.json:', e.message);
}

// ========================================================
// üìÜ –ú–ê–ü–ü–ò–ù–ì –ú–ï–°–Ø–¶–ï–í: –†—É—Å ‚Üí –ê–Ω–≥–ª
// ========================================================
const russianToEnglishMonth = {
  —è–Ω–≤–∞—Ä—å: 'January',
  —Ñ–µ–≤—Ä–∞–ª—å: 'February',
  –º–∞—Ä—Ç: 'March',
  –∞–ø—Ä–µ–ª—å: 'April',
  –º–∞–π: 'May',
  –∏—é–Ω—å: 'June',
  –∏—é–ª—å: 'July',
  –∞–≤–≥—É—Å—Ç: 'August',
  —Å–µ–Ω—Ç—è–±—Ä—å: 'September',
  –æ–∫—Ç—è–±—Ä—å: 'October',
  –Ω–æ—è–±—Ä—å: 'November',
  –¥–µ–∫–∞–±—Ä—å: 'December',
};

function getEnglishMonthName(ruMonth) {
  if (ruMonth === 'now') {
    return new Date().toLocaleString('en-GB', { month: 'long' });
  }
  const lower = ruMonth.toLowerCase().trim();
  return russianToEnglishMonth[lower] || null;
}

function getRussianMonthName(enMonth) {
  const entry = Object.entries(russianToEnglishMonth).find(([, eng]) => eng === enMonth);
  return entry ? entry[0] : enMonth;
}

// ========================================================
// üï∞Ô∏è –ó–ê–ì–†–£–ó–ö–ê –í–†–ï–ú–Å–ù –ü–û ID
// ========================================================
function loadTimesById(id) {
  const filePath = path.join(timesDir, `${id}.json`);
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      const parsed = JSON.parse(data);
      return Object.keys(parsed).length ? parsed : null;
    }
    return null;
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, e.message);
    return null;
  }
}

// ========================================================
// üïê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò
// ========================================================
function fmt(time) {
  return Array.isArray(time) && time.length >= 2
    ? `<code>${String(time[0]).padStart(2, '0')}:${String(time[1]).padStart(2, '0')}</code>`
    : '<code>‚Äî</code>';
}

// ========================================================
// üìÖ –í–†–ï–ú–ï–ù–ê –ù–ê –°–ï–ì–û–î–ù–Ø (—Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º)
// ========================================================
function getPrayerTimesForToday(timesData) {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ <b>${monthRuCap}</b>`;

  const dayData = monthData[day];
  if (!dayData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ <b>${day} ${monthRuCap}</b>`;

  return `
‚ú® <b>–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>
üìÖ <i>${day} ${monthRuCap}</i>

üïå <b>–§–∞–¥–∂—Ä</b>   ‚Äî  ${fmt(dayData.Fajr)}
üåÖ <b>–®—É—Ä—É–∫</b>   ‚Äî  ${fmt(dayData.Sunrise)}
‚òÄÔ∏è <b>–ó—É—Ö—Ä</b>    ‚Äî  ${fmt(dayData.Dhuhr)}
üåá <b>–ê—Å—Ä</b>     ‚Äî  ${fmt(dayData.Asr)}
üåÜ <b>–ú–∞–≥—Ä–∏–±</b>  ‚Äî  ${fmt(dayData.Maghrib)}
üåô <b>–ò—à–∞</b>     ‚Äî  ${fmt(dayData.Isha)}

üïã –ü—É—Å—Ç—å –≤–∞—à –Ω–∞–º–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.
`.trim();
}

// ========================================================
// üìÜ –¢–ê–ë–õ–ò–¶–ê –ù–ê –ú–ï–°–Ø–¶ (–∫—Ä–∞—Å–∏–≤–æ –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω–∞—è)
// ========================================================
function getPrayerTimesTableForMonth(timesData, monthEn) {
  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ <b>${monthEn}</b>`;

  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const col = { day: 3, time: 6 };
  let table = `<pre>`;
  table += `–î`.padEnd(col.day + 1) +
           `–§–∞–¥–∂—Ä`.padEnd(col.time + 1) +
           `–®—É—Ä—É–∫`.padEnd(col.time + 1) +
           `–ó—É—Ö—Ä`.padEnd(col.time + 1) +
           `–ê—Å—Ä`.padEnd(col.time + 1) +
           `–ú–∞–≥—Ä`.padEnd(col.time + 1) +
           `–ò—à–∞`.padEnd(col.time + 1) + '\n';
  table += '‚îÄ'.repeat(col.day + col.time * 6 + 6) + '\n';

  for (let d = 1; d <= 31; d++) {
    const dayStr = String(d).padStart(2, '0');
    const dayData = monthData[dayStr];
    let row = d.toString().padEnd(col.day + 1);

    if (dayData) {
      row += fmt(dayData.Fajr).replace(/<\/?code>/g, '').padEnd(col.time + 1) +
             fmt(dayData.Sunrise).replace(/<\/?code>/g, '').padEnd(col.time + 1) +
             fmt(dayData.Dhuhr).replace(/<\/?code>/g, '').padEnd(col.time + 1) +
             fmt(dayData.Asr).replace(/<\/?code>/g, '').padEnd(col.time + 1) +
             fmt(dayData.Maghrib).replace(/<\/?code>/g, '').padEnd(col.time + 1) +
             fmt(dayData.Isha).replace(/<\/?code>/g, '').padEnd(col.time + 1);
    } else {
      row += ' '.repeat(col.time * 6 + 5);
    }
    table += row + '\n';
  }
  table += '</pre>';

  return `
üóìÔ∏è <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–º–∞–∑–æ–≤ ‚Äî ${monthRuCap}</b>

${table}

üïå –í—Ä–µ–º–µ–Ω–∞ —É–∫–∞–∑–∞–Ω—ã –ø–æ –º–µ—Å—Ç—É. <i>–¢–æ—á–Ω–æ—Å—Ç—å ‚Äî –∑–∞–ª–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏.</i>
`.trim();
}

// ========================================================
// üóìÔ∏è –ö–õ–ê–í–ò–ê–¢–£–†–ê: –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (3 –≤ —Å—Ç—Ä–æ–∫—É)
// ========================================================
function getMonthsList(locationId) {
  const keyboard = Object.keys(russianToEnglishMonth)
    .map((month) => ({
      text: capitalize(month),
      callback_data: `select_month_${month}_${locationId}`,
    }))
    .reduce((acc, btn, idx) => {
      if (idx % 3 === 0) acc.push([]);
      acc[acc.length - 1].push(btn);
      return acc;
    }, []);

  keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `back_to_loc_${locationId}` }]);
  return { reply_markup: { inline_keyboard: keyboard } };
}

// ========================================================
// üìç –ú–ï–ù–Æ –ú–ï–°–¢–ê (—Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏)
// ========================================================
function getLocationMenu(locationId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üïå –°–µ–≥–æ–¥–Ω—è', callback_data: `day_${locationId}` }],
        [{ text: 'üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', callback_data: `month_${locationId}` }],
        [{ text: 'üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü', callback_data: `year_${locationId}` }],
        [],
        [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: `notify_setup_${locationId}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'cmd_cities_areas' }],
      ],
    },
  };
}

// ========================================================
// üì£ –ú–ï–ù–Æ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ========================================================
function getNotifyMenu(locationId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: `notify_on_${locationId}` }],
        [{ text: '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: `notify_off_${locationId}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `loc_${locationId}` }],
      ],
    },
  };
}

// ========================================================
// üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (—Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
// ========================================================
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üèôÔ∏è –ì–æ—Ä–æ–¥–∞', callback_data: 'cmd_cities' },
        { text: 'üèòÔ∏è –†–∞–π–æ–Ω—ã', callback_data: 'cmd_areas' },
      ],
      [{ text: 'üìñ –•–∞–¥–∏—Å –¥–Ω—è', callback_data: 'cmd_quote' }],
      [
        { text: '‚ÑπÔ∏è –û –±–æ—Ç–µ', callback_data: 'cmd_about' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'cmd_stats' },
      ],
    ],
  },
};

// ========================================================
// üë• –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
// ========================================================
let users = new Set();
let userSettings = {}; // { userId: { notify: true, locationId: 123 } }
let activeTimers = {}; // { userId: { Fajr: timer, Dhuhr: timer, ... } }

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const loaded = JSON.parse(fs.readFileSync(usersFilePath, 'utf8'));
      users = new Set(loaded.users || []);
      userSettings = loaded.settings || {};
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}, –ù–∞—Å—Ç—Ä–æ–µ–∫: ${Object.keys(userSettings).length}`);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json:', e.message);
  }
}

function saveUsers() {
  try {
    const data = {
      users: [...users],
      settings: userSettings,
    };
    fs.writeFileSync(usersFilePath, JSON.stringify(data, null, 2), 'utf8');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json:', e.message);
  }
}

function addUser(userId) {
  const id = userId.toString();
  if (!users.has(id)) {
    users.add(id);
    userSettings[id] = { notify: false, locationId: null };
    saveUsers();
    console.log(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id} | –í—Å–µ–≥–æ: ${users.size}`);
  }
}

// ========================================================
// üìú –•–ê–î–ò–° –î–ù–Ø
// ========================================================
const quotes = require('./quotes.json');

function getRandomQuote() {
  return quotes[Math.floor(Math.random() * quotes.length)];
}

// ========================================================
// üîç –ü–û–ò–°–ö –ü–û –ù–ê–ó–í–ê–ù–ò–Æ
// ========================================================
function searchLocations(query) {
  const allLocations = [...citiesAreasData.cities, ...citiesAreasData.areas];
  const lowerQuery = query.toLowerCase().trim();
  return allLocations
    .filter((loc) => (loc.name_cities || loc.name_areas || '').toLowerCase().includes(lowerQuery))
    .slice(0, 10);
}

// ========================================================
// üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞: –ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
// ========================================================
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// ========================================================
// üï∞Ô∏è –£—Ç–∏–ª–∏—Ç–∞: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ Date
// ========================================================
function timeToDate(dayTime, date = new Date()) {
  if (!Array.isArray(dayTime) || dayTime.length < 2) return null;
  const [hours, minutes] = dayTime;
  const d = new Date(date);
  d.setHours(hours, minutes, 0, 0);
  return d;
}

// ========================================================
// ‚è∞ –£–°–¢–ê–ù–û–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ========================================================
function scheduleNotifications(userId, locationId) {
  const timesData = loadTimesById(locationId);
  if (!timesData) return;

  const now = new Date();
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const day = String(now.getDate()).padStart(2, '0');
  const monthData = timesData[monthEn];
  const dayData = monthData?.[day];
  if (!dayData) return;

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã
  if (activeTimers[userId]) {
    Object.values(activeTimers[userId]).forEach(clearTimeout);
  }
  activeTimers[userId] = {};

  const prayers = ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];
  const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == locationId);
  const name = location?.name_cities || location?.name_areas || '–≤–∞—à–µ–º –º–µ—Å—Ç–µ';

  prayers.forEach(prayer => {
    const time = dayData[prayer];
    if (!time || !Array.isArray(time)) return;

    const prayerTime = timeToDate(time, now);
    const notifyTime = new Date(prayerTime.getTime() - 5 * 60 * 1000); // –∑–∞ 5 –º–∏–Ω—É—Ç
    if (notifyTime < now) return; // —É–∂–µ –ø—Ä–æ—à–ª–æ

    const timer = setTimeout(async () => {
      try {
        await bot.telegram.sendMessage(
          userId,
          `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–º–∞–∑–µ</b>\n\n` +
          `üïå –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è <b>${prayerName(prayer)}</b> –≤ <b>${name}</b>!\n` +
          `‚è∞ –í—Ä–µ–º—è: <code>${fmt(time)}</code>\n\n` +
          `üïã –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—é –Ω–∞–º–∞–∑–∞.`,
          { parse_mode: 'HTML' }
        );
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${userId}:`, err.message);
        userSettings[userId].notify = false;
        saveUsers();
      }
    }, notifyTime - now);

    activeTimers[userId][prayer] = timer;
  });

  console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
}

// –£—Ç–∏–ª–∏—Ç–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–º–∞–∑–∞
function prayerName(key) {
  return {
    Fajr: '–§–∞–¥–∂—Ä',
    Sunrise: '–®—É—Ä—É–∫',
    Dhuhr: '–ó—É—Ö—Ä',
    Asr: '–ê—Å—Ä',
    Maghrib: '–ú–∞–≥—Ä–∏–±',
    Isha: '–ò—à–∞'
  }[key] || key;
}

// ========================================================
// üöÄ –ö–û–ú–ê–ù–î–ê /start
// ========================================================
bot.start((ctx) => {
  addUser(ctx.from.id);
  return ctx.replyWithHTML(
    `üïå <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–†—É–∑–Ω–∞–º–∞¬ª</b>\n\n` +
      `¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏)\n\n` +
      `üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n\n` +
      `üïã –ë–ª–∞–≥–æ–¥–∞—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è.`,
    mainMenu
  ).catch(console.error);
});

// ========================================================
// üÜò /help
// ========================================================
bot.command('help', (ctx) => {
  return ctx.replyWithHTML(
    `üìò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n` +
      `‚Ä¢ <b>/start</b> ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `‚Ä¢ <b>/help</b> ‚Äî –ü–æ–º–æ—â—å\n` +
      `‚Ä¢ <b>/stats</b> ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚Ä¢ <b>/about</b> ‚Äî –û –ø—Ä–æ–µ–∫—Ç–µ\n` +
      `‚Ä¢ <b>/newquote</b> ‚Äî –ù–æ–≤—ã–π —Ö–∞–¥–∏—Å\n` +
      `‚Ä¢ <b>/day</b> ‚Äî –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n` +
      `‚Ä¢ <b>/month</b> ‚Äî –¢–∞–±–ª–∏—Ü–∞ –Ω–∞ –º–µ—Å—è—Ü\n` +
      `‚Ä¢ <b>/notify</b> ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏`
  ).catch(console.error);
});

// ========================================================
// üì£ /notify ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
// ========================================================
bot.command('notify', (ctx) => {
  addUser(ctx.from.id);
  const userId = ctx.from.id.toString();
  const setting = userSettings[userId] || { notify: false, locationId: null };

  let msg = `üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n`;
  if (setting.notify && setting.locationId) {
    const loc = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == setting.locationId);
    const name = loc?.name_cities || loc?.name_areas || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    msg += `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>–≤–∫–ª—é—á–µ–Ω—ã</b> –¥–ª—è:\nüìç <b>${name}</b>`;
  } else {
    msg += `‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>–≤—ã–∫–ª—é—á–µ–Ω—ã</b>.`;
  }

  return ctx.replyWithHTML(msg, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ', callback_data: 'cmd_cities_areas_notify' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'cmd_cities_areas' }],
      ],
    },
  }).catch(console.error);
});

// ========================================================
// üîî –û–ë–†–ê–ë–û–¢–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ========================================================
bot.on('callback_query', async (ctx) => {
  if (!ctx.callbackQuery || !ctx.callbackQuery.data) return;
  const data = ctx.callbackQuery.data;
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  try {
    await ctx.answerCbQuery().catch(() => {});
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback:', err.message);
  }

  try {
    // üìç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (data === 'cmd_cities_areas_notify') {
      return await ctx.editMessageText('üìç –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üèôÔ∏è –ì–æ—Ä–æ–¥–∞', callback_data: 'cmd_cities_notify' }],
            [{ text: 'üèòÔ∏è –†–∞–π–æ–Ω—ã', callback_data: 'cmd_areas_notify' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }],
          ],
        },
      });
    }

    if (data === 'cmd_cities_notify') {
      const keyboard = citiesAreasData.cities.map((c) => [
        { text: `üèôÔ∏è ${c.name_cities}`, callback_data: `notify_loc_${c.id}` },
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas_notify' }]);
      return await ctx.editMessageText('<b>üåÜ –ì–æ—Ä–æ–¥–∞</b>', {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: keyboard },
      });
    }

    if (data === 'cmd_areas_notify') {
      const keyboard = citiesAreasData.areas.map((a) => [
        { text: `üèòÔ∏è ${a.name_areas}`, callback_data: `notify_loc_${a.id}` },
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas_notify' }]);
      return await ctx.editMessageText('<b>üèòÔ∏è –†–∞–π–æ–Ω—ã</b>', {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: keyboard },
      });
    }

    if (data.startsWith('notify_loc_')) {
      const id = data.split('_')[2];
      const userIdStr = userId.toString();
      userSettings[userIdStr] = { ...userSettings[userIdStr], locationId: id };
      saveUsers();

      return await ctx.editMessageText(
        `üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?`,
        getNotifyMenu(id)
      );
    }

    if (data.startsWith('notify_setup_')) {
      const id = data.split('_')[2];
      return await ctx.editMessageText(
        `üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞`,
        getNotifyMenu(id)
      );
    }

    if (data.startsWith('notify_on_')) {
      const id = data.split('_')[2];
      const userIdStr = userId.toString();
      userSettings[userIdStr] = { notify: true, locationId: id };
      saveUsers();
      scheduleNotifications(userId, id);

      return await ctx.editMessageText(
        `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–∞–∑–∞.`,
        getLocationMenu(id)
      );
    }

    if (data.startsWith('notify_off_')) {
      const id = data.split('_')[2];
      const userIdStr = userId.toString();
      userSettings[userIdStr] = { ...userSettings[userIdStr], notify: false };
      saveUsers();

      if (activeTimers[userIdStr]) {
        Object.values(activeTimers[userIdStr]).forEach(clearTimeout);
        delete activeTimers[userIdStr];
      }

      return await ctx.editMessageText(
        `‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.`,
        getLocationMenu(id)
      );
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ if-–±–ª–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', err.message);
    try {
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainMenu);
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
    }
  }
});

// ========================================================
// üöÄ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// ========================================================
loadUsers();

// üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
Object.keys(userSettings).forEach(userId => {
  if (userSettings[userId].notify && userSettings[userId].locationId) {
    scheduleNotifications(userId, userSettings[userId].locationId);
  }
});

// ========================================================
// ‚òÅÔ∏è Vercel Webhook
// ========================================================
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }
  try {
    const body = await new Promise((resolve, reject) => {
      let data = '';
      req.on('data', (chunk) => (data += chunk));
      req.on('end', () => resolve(data));
      req.on('error', reject);
    });
    const update = JSON.parse(body);
    await bot.handleUpdate(update);
    res.status(200).json({ ok: true });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Webhook:', e.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

// ========================================================
// üíª –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö
// ========================================================
if (process.env.NODE_ENV !== 'production') {
  bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message);
  });
}