const { Telegraf } = require('telegraf');
const quotes = require('./quotes.json');
const timesDb = require('./times_db.json');
const fs = require('fs');
const path = require('path');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const bot = new Telegraf(BOT_TOKEN);

// --- –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ ---
const russianToEnglishMonth = {
  '—è–Ω–≤–∞—Ä—å': 'January',
  '—Ñ–µ–≤—Ä–∞–ª—å': 'February',
  '–º–∞—Ä—Ç': 'March',
  '–∞–ø—Ä–µ–ª—å': 'April',
  '–º–∞–π': 'May',
  '–∏—é–Ω—å': 'June',
  '–∏—é–ª—å': 'July',
  '–∞–≤–≥—É—Å—Ç': 'August',
  '—Å–µ–Ω—Ç—è–±—Ä—å': 'September',
  '–æ–∫—Ç—è–±—Ä—å': 'October',
  '–Ω–æ—è–±—Ä—å': 'November',
  '–¥–µ–∫–∞–±—Ä—å': 'December'
};

function getEnglishMonthName(russianNameOrNow = 'now') {
  if (russianNameOrNow === 'now') {
    const now = new Date();
    return now.toLocaleString('en-GB', { month: 'long' });
  } else {
    const lowerRussianName = russianNameOrNow.toLowerCase();
    for (const [ru, en] of Object.entries(russianToEnglishMonth)) {
      if (ru.toLowerCase() === lowerRussianName) {
        return en;
      }
    }
    return null;
  }
}

function getRussianMonthName(englishName) {
  for (const [ru, en] of Object.entries(russianToEnglishMonth)) {
    if (en === englishName) {
      return ru;
    }
  }
  return englishName;
}

const usersFilePath = path.join(__dirname, 'users.json');

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const data = fs.readFileSync(usersFilePath, 'utf8');
      return new Set(JSON.parse(data));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
  return new Set();
}

function saveUsers(users) {
  try {
    fs.writeFileSync(usersFilePath, JSON.stringify([...users]), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

let users = loadUsers();

function addUser(userId) {
  const userCountBefore = users.size;
  users.add(userId.toString());
  if (users.size > userCountBefore) {
    saveUsers(users);
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  }
}

function getUserCount() {
  return users.size;
}

function getRandomQuote() {
  const randomIndex = Math.floor(Math.random() * quotes.length);
  return quotes[randomIndex];
}

function getPrayerTimesForToday() {
  const now = new Date();
  const monthNameEnglish = now.toLocaleString('en-GB', { month: 'long' });
  const day = String(now.getDate()).padStart(2, '0');
  const monthNameRussian = now.toLocaleString('ru-RU', { month: 'long' });
  const monthNameRussianCapitalized = monthNameRussian.charAt(0).toUpperCase() + monthNameRussian.slice(1);

  const monthData = timesDb[monthNameEnglish];
  if (!monthData) {
    return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—Ü–∞ "${monthNameEnglish}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
  }

  const dayData = monthData[day];
  if (!dayData) {
    return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${day} ${monthNameRussianCapitalized} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
  }

  const formatTime = (timeArray) => `${String(timeArray[0]).padStart(2, '0')}:${String(timeArray[1]).padStart(2, '0')}`;

  return `
üìÖ ${day} ${monthNameRussianCapitalized}

üèô –§–∞–¥–∂—Ä: ${formatTime(dayData.Fajr)}
üåÖ –í–æ—Å—Ö–æ–¥: ${formatTime(dayData.Sunrise)}
üåá –ó—É—Ö—Ä: ${formatTime(dayData.Dhuhr)}
üåÜ –ê—Å—Ä: ${formatTime(dayData.Asr)}
üèô –ú–∞–≥—Ä–∏–±: ${formatTime(dayData.Maghrib)}
üåÉ –ò—à–∞: ${formatTime(dayData.Isha)}
`;
}

function getPrayerTimesTableForMonth(monthNameEnglish) {
  const monthData = timesDb[monthNameEnglish];
  if (!monthData) {
    return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—Ü–∞ "${monthNameEnglish}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
  }

  const monthNameRussian = getRussianMonthName(monthNameEnglish);
  const monthNameRussianCapitalized = monthNameRussian ? (monthNameRussian.charAt(0).toUpperCase() + monthNameRussian.slice(1)) : monthNameEnglish;

  const formatTime = (timeArray) => {
    if (!timeArray || timeArray.length < 2) return "--:--";
    return `${String(timeArray[0]).padStart(2, '0')}:${String(timeArray[1]).padStart(2, '0')}`;
  };

  const dayWidth = 4;
  const timeWidth = 5;

  const header = `–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ ${monthNameRussianCapitalized}\n\n`;
  const columnHeader = `<pre>` +
    `–î–µ–Ω—å`.padEnd(dayWidth, ' ') + '‚îÇ' +
    `–§–∞–¥–∂—Ä`.padEnd(timeWidth, ' ') + '‚îÇ' +
    `–í–æ—Å—Ö.`.padEnd(timeWidth, ' ') + '‚îÇ' +
    `–ó—É—Ö—Ä`.padEnd(timeWidth, ' ') + '‚îÇ' +
    `–ê—Å—Ä`.padEnd(timeWidth, ' ') + '‚îÇ' +
    `–ú–∞–≥—Ä.`.padEnd(timeWidth, ' ') + '‚îÇ' +
    `–ò—à–∞`.padEnd(timeWidth, ' ') + '\n' +
    ''.padEnd(dayWidth + 1 + timeWidth * 6 + 6, '‚îÄ') + '\n';

  let tableBody = '';

  for (let day = 1; day <= 31; day++) {
    const dayStr = day.toString().padStart(2, '0');
    const dayData = monthData[dayStr];

    let row = day.toString().padEnd(dayWidth, ' ') + '‚îÇ';

    if (dayData) {
      row += formatTime(dayData.Fajr).padEnd(timeWidth, ' ') + '‚îÇ';
      row += formatTime(dayData.Sunrise).padEnd(timeWidth, ' ') + '‚îÇ';
      row += formatTime(dayData.Dhuhr).padEnd(timeWidth, ' ') + '‚îÇ';
      row += formatTime(dayData.Asr).padEnd(timeWidth, ' ') + '‚îÇ';
      row += formatTime(dayData.Maghrib).padEnd(timeWidth, ' ') + '‚îÇ';
      row += formatTime(dayData.Isha).padEnd(timeWidth, ' ');
    } else {
      row += ''.padEnd((timeWidth + 1) * 6 - 1, ' ');
    }
    tableBody += row + '\n';
  }

  const footer = `</pre>`;
  return header + columnHeader + tableBody + footer;
}

function getMonthsList() {
  const russianMonths = Object.keys(russianToEnglishMonth);
  const keyboard = [];
  for (let i = 0; i < russianMonths.length; i += 3) {
    const row = russianMonths.slice(i, i + 3).map(russianMonth => ({
      text: russianMonth.charAt(0).toUpperCase() + russianMonth.slice(1),
      callback_data: `month_${russianMonth}`
    }));
    keyboard.push(row);
  }
  return {
    reply_markup: {
      inline_keyboard: keyboard
    }
  };
}

// --- Inline –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ ---
const inlineMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üïå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è /day', callback_data: 'cmd_day' },
        { text: 'üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü /month', callback_data: 'cmd_month' }
      ],
      [
        { text: 'üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü /year', callback_data: 'cmd_year' },
        { text: 'üí¨ –ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ /newquote', callback_data: 'cmd_newquote' }
      ],
      [
		{ text: '‚ÑπÔ∏è About /about', callback_data: 'cmd_about' },
        { text: '‚ùì –ü–æ–º–æ—â—å /help', callback_data: 'cmd_help' }
      ],
	  [
		{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /stats', callback_data: 'cmd_stats' }
	  ]
    ]
  }
};

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

bot.start((ctx) => {
  addUser(ctx.from.id);

  const welcomeMessage = `
üåü –†—É–∑–Ω–∞–º–∞ - –ö—É—Ä–∞—Ö—Å–∫–∏–π —Ä–∞–π–æ–Ω

¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏ –∏ –∞–ª—å-–•–∞–∫–∏–º)

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:
  `;

  ctx.reply(welcomeMessage, inlineMenu);
});

bot.help((ctx) => {
  addUser(ctx.from.id);

  ctx.reply(`
üìñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç

–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é –Ω–∏–∂–µ.
  `, inlineMenu);
});

bot.command('about', (ctx) => {
  addUser(ctx.from.id);

  ctx.reply(`
ü§ñ –†—É–∑–Ω–∞–º–∞ –ë–æ—Ç v1.1
üïå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
üìö –•–∞–¥–∏—Å –≤ –±–∞–∑–µ: ${quotes.length}
  `, inlineMenu);
});

bot.command('stats', (ctx) => {
  addUser(ctx.from.id);

  ctx.reply(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –ú–µ—Å—è—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤: ${Object.keys(timesDb).length}
  `, inlineMenu);
});

bot.command('newquote', (ctx) => {
  addUser(ctx.from.id);

  const quote = getRandomQuote();
  const message = `‚ùù ${quote.text} ‚ùû\n\n‚Äî ${quote.author}`;
  ctx.reply(message, inlineMenu);
});

bot.command('day', (ctx) => {
  addUser(ctx.from.id);

  const prayerTimesMessage = getPrayerTimesForToday();
  ctx.reply(prayerTimesMessage, { parse_mode: 'HTML', ...inlineMenu });
});

bot.command('month', (ctx) => {
  addUser(ctx.from.id);

  const now = new Date();
  const monthNameEnglish = now.toLocaleString('en-GB', { month: 'long' });

  const tableMessage = getPrayerTimesTableForMonth(monthNameEnglish);
  ctx.reply(tableMessage, { parse_mode: 'HTML', ...inlineMenu });
});

bot.command('year', (ctx) => {
  addUser(ctx.from.id);

  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList());
});

bot.on('text', (ctx) => {
  addUser(ctx.from.id);

  const text = ctx.message.text.toLowerCase();

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –ø—Ä–æ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏
  ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.', inlineMenu);
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ---

bot.on('callback_query', async (ctx) => {
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  const data = ctx.callbackQuery.data;

  try {
    if (data === 'cmd_day') {
      await ctx.answerCbQuery();
      const dayMessage = getPrayerTimesForToday();
      await ctx.editMessageText(dayMessage, { parse_mode: 'HTML', ...inlineMenu });
    } else if (data === 'cmd_month') {
      await ctx.answerCbQuery();
      const now = new Date();
      const monthNameEnglish = now.toLocaleString('en-GB', { month: 'long' });
      const monthMessage = getPrayerTimesTableForMonth(monthNameEnglish);
      await ctx.editMessageText(monthMessage, { parse_mode: 'HTML', ...inlineMenu });
    } else if (data === 'cmd_year') {
      await ctx.answerCbQuery();
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList());
    } else if (data === 'cmd_newquote') {
      await ctx.answerCbQuery();
      const quote = getRandomQuote();
      const quoteMsg = `‚ùù ${quote.text} ‚ùû\n\n‚Äî ${quote.author}`;
      await ctx.editMessageText(quoteMsg, inlineMenu);
    } else if (data === 'cmd_stats') {
      await ctx.answerCbQuery();
      const statsMsg = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –ú–µ—Å—è—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤: ${Object.keys(timesDb).length}
      `;
      await ctx.editMessageText(statsMsg, inlineMenu);
    } else if (data === 'cmd_help') {
      await ctx.answerCbQuery();
      await ctx.editMessageText(`
üìñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç

–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é.
      `, inlineMenu);
    } else if (data.startsWith('month_')) {
      // –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏–∑ –º–µ–Ω—é /year
      const selectedRussianMonth = data.split('_')[1];
      const selectedEnglishMonth = getEnglishMonthName(selectedRussianMonth);

      if (!selectedEnglishMonth) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
        return;
      }

      const tableMessage = getPrayerTimesTableForMonth(selectedEnglishMonth);

      await ctx.answerCbQuery();
      await ctx.editMessageText(tableMessage, { parse_mode: 'HTML', ...inlineMenu });
    } else {
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', { show_alert: true });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ---
bot.telegram.setMyCommands([
  { command: 'day', description: '–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üïå' },
  { command: 'month', description: '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü' },
  { command: 'year', description: '–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü' },
  { command: 'newquote', description: '–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞' },
  { command: 'about', description: 'About' },
  { command: 'help', description: '–ü–æ–º–æ—â—å' },
  { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞' }
]);

// Webhook handler –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('OK');
  } catch (error) {
    console.error('Error handling update:', error);
    res.status(500).send('Error');
  }
};

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if (process.env.NODE_ENV !== 'production') {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!');
  console.log(`–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}`);
}
