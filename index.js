const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');

// === –¢–û–ö–ï–ù ===
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
const bot = new Telegraf(BOT_TOKEN);

// === –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ===
const citiesAreasPath = path.join(__dirname, 'db', 'cities-areas.json');
const timesDir = path.join(__dirname, 'db', 'cities-areas');
const usersFilePath = path.join(__dirname, 'users.json');

// === –ó–ê–ì–†–£–ó–ö–ê –ì–û–†–û–î–û–í –ò –†–ê–ô–û–ù–û–í ===
let citiesAreasData = { cities: [], areas: [] };
try {
  if (fs.existsSync(citiesAreasPath)) {
    citiesAreasData = JSON.parse(fs.readFileSync(citiesAreasPath, 'utf8'));
  } else {
    console.warn('–§–∞–π–ª cities-areas.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (e) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cities-areas.json:', e);
}

// === –ú–ê–ü–ü–ò–ù–ì –ú–ï–°–Ø–¶–ï–í ===
const russianToEnglishMonth = {
  —è–Ω–≤–∞—Ä—å: 'January',
  —Ñ–µ–≤—Ä–∞–ª—å: 'February',
  –º–∞—Ä—Ç: 'March',
  –∞–ø—Ä–µ–ª—å: 'April',
  –º–∞–π: 'May',
  –∏—é–Ω—å: 'June',
  –∏—é–ª—å: 'July',
  –∞–≤–≥—É—Å—Ç: 'August',
  —Å–µ–Ω—Ç—è–±—Ä—å: 'September',
  –æ–∫—Ç—è–±—Ä—å: 'October',
  –Ω–æ—è–±—Ä—å: 'November',
  –¥–µ–∫–∞–±—Ä—å: 'December'
};

function getEnglishMonthName(ruMonth) {
  if (ruMonth === 'now') {
    return new Date().toLocaleString('en-GB', { month: 'long' });
  }
  const lower = ruMonth.toLowerCase().trim();
  return russianToEnglishMonth[lower] || null;
}

function getRussianMonthName(enMonth) {
  const entry = Object.entries(russianToEnglishMonth).find(([_, en]) => en === enMonth);
  return entry ? entry[0] : enMonth;
}

// === –ó–ê–ì–†–£–ó–ö–ê –í–†–ï–ú–Å–ù –ü–û ID ===
function loadTimesById(id) {
  const filePath = path.join(timesDir, `${id}.json`);
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      const parsed = JSON.parse(data);
      return Object.keys(parsed).length ? parsed : null;
    }
    return null;
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, e);
    return null;
  }
}

// === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò ===
function fmt(time) {
  return Array.isArray(time) && time.length >= 2
    ? `${String(time[0]).padStart(2, '0')}:${String(time[1]).padStart(2, '0')}`
    : '--:--';
}

// === –í–†–ï–ú–ï–ù–ê –ù–ê –°–ï–ì–û–î–ù–Ø ===
function getPrayerTimesForToday(timesData) {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const monthRu = now.toLocaleString('ru-RU', { month: 'long' });
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;
  const dayData = monthData[day];
  if (!dayData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${day} ${monthRuCap}`;

  return `
üìÖ ${day} ${monthRuCap}
–§–∞–¥–∂—Ä: ${fmt(dayData.Fajr)}
–í–æ—Å—Ö–æ–¥: ${fmt(dayData.Sunrise)}
–ó—É—Ö—Ä: ${fmt(dayData.Dhuhr)}
–ê—Å—Ä: ${fmt(dayData.Asr)}
–ú–∞–≥—Ä–∏–±: ${fmt(dayData.Maghrib)}
–ò—à–∞: ${fmt(dayData.Isha)}
  `.trim();
}

// === –¢–ê–ë–õ–ò–¶–ê –ù–ê –ú–ï–°–Ø–¶ ===
function getPrayerTimesTableForMonth(timesData, monthEn) {
  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;
  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);
  const dayW = 4;
  const timeW = 5;

  let header = `–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ ${monthRuCap}\n`;
  let colHeader = `<pre>` +
    '–î–µ–Ω—å'.padEnd(dayW, ' ') + '‚îÇ' +
    '–§–∞–¥–∂—Ä'.padEnd(timeW, ' ') + '‚îÇ' +
    '–í–æ—Å—Ö.'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ó—É—Ö—Ä'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ê—Å—Ä'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ú–∞–≥—Ä.'.padEnd(timeW, ' ') + '‚îÇ' +
    '–ò—à–∞'.padEnd(timeW, ' ') + '\n' +
    ''.padEnd(dayW + 1 + timeW * 6 + 6, '‚îÄ') + '\n';

  let body = '';
  for (let d = 1; d <= 31; d++) {
    const dayStr = String(d).padStart(2, '0');
    const dayData = monthData[dayStr];
    let row = d.toString().padEnd(dayW, ' ') + '‚îÇ';
    if (dayData) {
      row += fmt(dayData.Fajr).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Sunrise).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Dhuhr).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Asr).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Maghrib).padEnd(timeW, ' ') + '‚îÇ' +
             fmt(dayData.Isha).padEnd(timeW, ' ');
    } else {
      row += ''.padEnd((timeW + 1) * 6 - 1, ' ');
    }
    body += row + '\n';
  }

  return header + colHeader + body + '</pre>';
}

// === –°–ü–ò–°–û–ö –ú–ï–°–Ø–¶–ï–í (—Å ID –º–µ—Å—Ç–∞) ===
function getMonthsList(locationId) {
  const keyboard = Object.keys(russianToEnglishMonth)
    .reduce((acc, month, index) => {
      if (index % 3 === 0) acc.push([]);
      const row = acc[acc.length - 1];
      row.push({
        text: month.charAt(0).toUpperCase() + month.slice(1),
        callback_data: `select_month_${month}_${locationId}`
      });
      return acc;
    }, []);
  keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `back_to_loc_${locationId}` }]);
  return { reply_markup: { inline_keyboard: keyboard } };
}

// === –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ú–ï–°–¢–ê ===
function getLocationMenu(locationId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–î–µ–Ω—å', callback_data: `day_${locationId}` }],
        [{ text: '–ú–µ—Å—è—Ü', callback_data: `month_${locationId}` }],
        [{ text: '–ì–æ–¥', callback_data: `year_${locationId}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]
      ]
    }
  };
}

// === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–ì–æ—Ä–æ–¥–∞', callback_data: 'cmd_cities' }],
      [{ text: '–†–∞–π–æ–Ω—ã', callback_data: 'cmd_areas' }],
      [{ text: '–•–∞–¥–∏—Å', callback_data: 'cmd_quote' }]
    ]
  }
};

// === –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
let users = new Set();

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      users = new Set(JSON.parse(fs.readFileSync(usersFilePath, 'utf8')));
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json:', e);
  }
}

function saveUsers() {
  try {
    fs.writeFileSync(usersFilePath, JSON.stringify([...users]), 'utf8');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json:', e);
  }
}

function addUser(userId) {
  const id = userId.toString();
  if (!users.has(id)) {
    users.add(id);
    saveUsers();
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id}. –í—Å–µ–≥–æ: ${users.size}`);
  }
}

// === –•–ê–î–ò–° ===
const quotes = require('./quotes.json');
function getRandomQuote() {
  return quotes[Math.floor(Math.random() * quotes.length)];
}

// === –°–¢–ê–†–¢ ===
bot.start((ctx) => {
  addUser(ctx.from.id);
  ctx.reply(
    'üìÖ‚è∞ –†—É–∑–Ω–∞–º–∞ - –ö—É—Ä–∞—Ö—Å–∫–∏–π —Ä–∞–π–æ–Ω\n¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏ –∏ –∞–ª—å-–•–∞–∫–∏–º)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:',
    mainMenu
  );
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  try {
    await ctx.answerCbQuery();
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å answerCbQuery:', e);
  }

  // === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
  if (data === 'cmd_cities_areas') {
    return await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ:', mainMenu);
  }

  // === –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ ===
  if (data === 'cmd_cities') {
    const keyboard = citiesAreasData.cities.map(c => [{
      text: `${c.name_cities} (${c.id})`,
      callback_data: `loc_${c.id}`
    }]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);
    return await ctx.editMessageText('<b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:</b>', {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // === –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–π–æ–Ω—ã ===
  if (data === 'cmd_areas') {
    const keyboard = citiesAreasData.areas.map(a => [{
      text: `${a.name_areas} (${a.id})`,
      callback_data: `loc_${a.id}`
    }]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);
    return await ctx.editMessageText('<b>–°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤:</b>', {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // === –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ (–≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω) ===
  if (data.startsWith('loc_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText(
        `‚ùå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è "${location.name_cities || location.name_areas}" –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`,
        mainMenu
      );
    }

    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>${name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // === –í—Ä–µ–º—è –Ω–∞ –¥–µ–Ω—å ===
  if (data.startsWith('day_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);
    }

    const msg = getPrayerTimesForToday(timesData);
    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // === –í—Ä–µ–º—è –Ω–∞ –º–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π) ===
  if (data === `month_${data.split('_')[1]}` && data.startsWith('month_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);
    }

    const monthEn = getEnglishMonthName('now');
    const msg = getPrayerTimesTableForMonth(timesData, monthEn);
    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // === –ì–æ–¥ ‚Äî –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ ===
  if (data.startsWith('year_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);
    }

    return await ctx.editMessageText('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList(id));
  }

  // === –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ ===
  if (data.startsWith('select_month_')) {
    const [_, __, ruMonth, locationId] = data.split('_');
    const enMonth = getEnglishMonthName(ruMonth);
    if (!enMonth) return await ctx.editMessageText('‚ùå –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.', getLocationMenu(locationId));

    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == locationId);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(locationId);
    if (!timesData) {
      return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);
    }

    const msg = getPrayerTimesTableForMonth(timesData, enMonth);
    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(locationId)
      }
    );
  }

  // === –ù–∞–∑–∞–¥ –∫ –º–µ—Å—Ç—É ===
  if (data.startsWith('back_to_loc_')) {
    const id = data.split('_')[3];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);
    }

    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>${name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // === –•–∞–¥–∏—Å ===
  if (data === 'cmd_quote') {
    const q = getRandomQuote();
    return await ctx.editMessageText(`‚ùù ${q.text} ‚ùû\n‚Äî ${q.author}`, mainMenu);
  }
});

// === –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
loadUsers();

// === VERCCEL WEBHOOK ===
module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }
  try {
    const body = await new Promise((resolve, reject) => {
      let data = '';
      req.on('data', chunk => data += chunk);
      req.on('end', () => resolve(data));
      req.on('error', reject);
    });
    const update = JSON.parse(body);
    await bot.handleUpdate(update);
    res.status(200).json({ ok: true });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ Webhook:', e);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// === –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö ===
if (process.env.NODE_ENV !== 'production') {
  bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  });
}