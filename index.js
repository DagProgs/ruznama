const { Telegraf } = require('telegraf');
const quotes = require('./quotes.json');
const timesDb = require('./times_db.json'); // –ó–∞–≥—Ä—É–∂–∞–µ–º times_db.json
const fs = require('fs');
const path = require('path');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const bot = new Telegraf(BOT_TOKEN);

// --- –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ ---
const russianToEnglishMonth = {
  '—è–Ω–≤–∞—Ä—å': 'January',
  '—Ñ–µ–≤—Ä–∞–ª—å': 'February',
  '–º–∞—Ä—Ç': 'March',
  '–∞–ø—Ä–µ–ª—å': 'April',
  '–º–∞–π': 'May',
  '–∏—é–Ω—å': 'June',
  '–∏—é–ª—å': 'July',
  '–∞–≤–≥—É—Å—Ç': 'August',
  '—Å–µ–Ω—Ç—è–±—Ä—å': 'September',
  '–æ–∫—Ç—è–±—Ä—å': 'October',
  '–Ω–æ—è–±—Ä—å': 'November',
  '–¥–µ–∫–∞–±—Ä—å': 'December'
};

// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∏–ª–∏ —Ç–µ–∫—É—â–µ–º—É
function getEnglishMonthName(russianNameOrNow = 'now') {
  if (russianNameOrNow === 'now') {
    const now = new Date();
    return now.toLocaleString('en-GB', { month: 'long' }); // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  } else {
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const lowerRussianName = russianNameOrNow.toLowerCase();
    for (const [ru, en] of Object.entries(russianToEnglishMonth)) {
      if (ru.toLowerCase() === lowerRussianName) {
        return en;
      }
    }
    return null; // –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É
function getRussianMonthName(englishName) {
    for (const [ru, en] of Object.entries(russianToEnglishMonth)) {
      if (en === englishName) {
        return ru;
      }
    }
    return englishName; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
}

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const usersFilePath = path.join(__dirname, 'users.json');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const data = fs.readFileSync(usersFilePath, 'utf8');
      return new Set(JSON.parse(data));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
  return new Set();
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUsers(users) {
  try {
    fs.writeFileSync(usersFilePath, JSON.stringify([...users]), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let users = loadUsers();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function addUser(userId) {
  const userCountBefore = users.size;
  users.add(userId.toString()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
  if (users.size > userCountBefore) {
    saveUsers(users);
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getUserCount() {
  return users.size;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
function getRandomQuote() {
  const randomIndex = Math.floor(Math.random() * quotes.length);
  return quotes[randomIndex];
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤ ---

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
function getPrayerTimesForToday() {
    const now = new Date();
    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const monthNameEnglish = now.toLocaleString('en-GB', { month: 'long' });
    const day = String(now.getDate()).padStart(2, '0');
    const monthNameRussian = now.toLocaleString('ru-RU', { month: 'long' });
    const monthNameRussianCapitalized = monthNameRussian.charAt(0).toUpperCase() + monthNameRussian.slice(1);

    const monthData = timesDb[monthNameEnglish]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è
    if (!monthData) {
        return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—Ü–∞ "${monthNameEnglish}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
    }

    const dayData = monthData[day];
    if (!dayData) {
        return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${day} ${monthNameRussianCapitalized} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ HH:MM
    const formatTime = (timeArray) => `${String(timeArray[0]).padStart(2, '0')}:${String(timeArray[1]).padStart(2, '0')}`;

    return `
üìÖ ${day} ${monthNameRussianCapitalized}

üèô –§–∞–¥–∂—Ä: ${formatTime(dayData.Fajr)}
üåÖ –í–æ—Å—Ö–æ–¥: ${formatTime(dayData.Sunrise)}
üåá –ó—É—Ö—Ä: ${formatTime(dayData.Dhuhr)}
üåÜ –ê—Å—Ä: ${formatTime(dayData.Asr)}
üèô –ú–∞–≥—Ä–∏–±: ${formatTime(dayData.Maghrib)}
üåÉ –ò—à–∞: ${formatTime(dayData.Isha)}
`;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞)
function getPrayerTimesTableForMonth(monthNameEnglish) {
    const monthData = timesDb[monthNameEnglish];
    if (!monthData) {
        return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—Ü–∞ "${monthNameEnglish}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const monthNameRussian = getRussianMonthName(monthNameEnglish);
    const monthNameRussianCapitalized = monthNameRussian ? (monthNameRussian.charAt(0).toUpperCase() + monthNameRussian.slice(1)) : monthNameEnglish;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ HH:MM
    const formatTime = (timeArray) => {
         if (!timeArray || timeArray.length < 2) return "--:--"; // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
         return `${String(timeArray[0]).padStart(2, '0')}:${String(timeArray[1]).padStart(2, '0')}`;
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞)
    const dayWidth = 4; // "–î–µ–Ω—å"
    const timeWidth = 5; // "–ß–ß:MM"

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const header = `–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ ${monthNameRussianCapitalized}\n\n`;
    const columnHeader = `<pre>` +
        `–î–µ–Ω—å`.padEnd(dayWidth, ' ') + '‚îÇ' +
        `–§–∞–¥–∂—Ä`.padEnd(timeWidth, ' ') + '‚îÇ' +
        `–í–æ—Å—Ö.`.padEnd(timeWidth, ' ') + '‚îÇ' +
        `–ó—É—Ö—Ä`.padEnd(timeWidth, ' ') + '‚îÇ' +
        `–ê—Å—Ä`.padEnd(timeWidth, ' ') + '‚îÇ' +
        `–ú–∞–≥—Ä.`.padEnd(timeWidth, ' ') + '‚îÇ' +
        `–ò—à–∞`.padEnd(timeWidth, ' ') + '\n' +
        ''.padEnd(dayWidth + 1 + timeWidth * 6 + 6, '‚îÄ') + '\n'; // –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º

    let tableBody = '';

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –æ—Ç 1 –¥–æ 31
    for (let day = 1; day <= 31; day++) {
        const dayStr = day.toString().padStart(2, '0');
        const dayData = monthData[dayStr];

        let row = day.toString().padEnd(dayWidth, ' ') + '‚îÇ'; // –ù–æ–º–µ—Ä –¥–Ω—è —Å–ª–µ–≤–∞

        if (dayData) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            row += formatTime(dayData.Fajr).padEnd(timeWidth, ' ') + '‚îÇ';
            row += formatTime(dayData.Sunrise).padEnd(timeWidth, ' ') + '‚îÇ';
            row += formatTime(dayData.Dhuhr).padEnd(timeWidth, ' ') + '‚îÇ';
            row += formatTime(dayData.Asr).padEnd(timeWidth, ' ') + '‚îÇ';
            row += formatTime(dayData.Maghrib).padEnd(timeWidth, ' ') + '‚îÇ';
            row += formatTime(dayData.Isha).padEnd(timeWidth, ' ');
        } else {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è), –∑–∞–ø–æ–ª–Ω—è–µ–º "--:--"
             row += ''.padEnd((timeWidth + 1) * 6 - 1, ' '); // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–±–µ–ª–∞–º–∏
        }
        tableBody += row + '\n';
    }

    const footer = `</pre>`;
    return header + columnHeader + tableBody + footer;
}


// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
function getMonthsList() {
    const russianMonths = Object.keys(russianToEnglishMonth);
    const keyboard = [];
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –º–µ—Å—è—Ü–∞
    for (let i = 0; i < russianMonths.length; i += 3) {
        const row = russianMonths.slice(i, i + 3).map(russianMonth => ({
            text: russianMonth.charAt(0).toUpperCase() + russianMonth.slice(1), // –° –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            callback_data: `month_${russianMonth}` // Callback —Å —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        }));
        keyboard.push(row);
    }
    return {
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const userId = ctx.from.id;
  addUser(userId); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏

  const welcomeMessage = `
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç!

–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª—É—á–∞–π–Ω—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤.

–ö–æ–º–∞–Ω–¥—ã:
/newquote - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
/help - –ü–æ–º–æ—â—å
/about - –û –±–æ—Ç–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ üìä
/day - –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üïå
/month - –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü üìÖ
/year - –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ üóìÔ∏è
  `;
  ctx.reply(welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.help((ctx) => {
  const userId = ctx.from.id;
  addUser(userId);

  ctx.reply(`
üìñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç

/newquote - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ üìä
/day - –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üïå
/month - –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü üìÖ
/year - –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ üóìÔ∏è
/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ /about
bot.command('about', (ctx) => {
  const userId = ctx.from.id;
  addUser(userId);

  ctx.reply(`
ü§ñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç v1.0
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
üí° –ò—Å—Ç–æ—á–Ω–∏–∫: JSON —Ñ–∞–π–ª—ã
üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Vercel
  `);
});

// –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command('stats', (ctx) => {
  const userId = ctx.from.id;
  addUser(userId);

  ctx.reply(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –ú–µ—Å—è—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤: ${Object.keys(timesDb).length}
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ /newquote
bot.command('newquote', (ctx) => {
  const userId = ctx.from.id;
  addUser(userId);

  const quote = getRandomQuote();
  const message = `‚ùù ${quote.text} ‚ùû\n\n‚Äî ${quote.author}`;
  ctx.reply(message);
});

// --- –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ ---

// –ö–æ–º–∞–Ω–¥–∞ /day
bot.command('day', (ctx) => {
    const userId = ctx.from.id;
    addUser(userId);

    const prayerTimesMessage = getPrayerTimesForToday();
    ctx.reply(prayerTimesMessage, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /month
bot.command('month', (ctx) => {
    const userId = ctx.from.id;
    addUser(userId);

    const now = new Date();
    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ timesDb
    const monthNameEnglish = now.toLocaleString('en-GB', { month: 'long' });

    const tableMessage = getPrayerTimesTableForMonth(monthNameEnglish);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    ctx.reply(tableMessage, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /year
bot.command('year', (ctx) => {
    const userId = ctx.from.id;
    addUser(userId);

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
  const userId = ctx.from.id;
  addUser(userId);

  const text = ctx.message.text.toLowerCase();

  if (text === '—Ü–∏—Ç–∞—Ç–∞' || text === 'quote') {
    const quote = getRandomQuote();
    const message = `‚ùù ${quote.text} ‚ùû\n\n‚Äî ${quote.author}`;
    ctx.reply(message);
  } else if (text === '–ø–æ–º–æ—â—å' || text === 'help') {
    ctx.reply(`
üìñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç

/newquote - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ üìä
/day - –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üïå
/month - –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü üìÖ
/year - –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ üóìÔ∏è
/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    `);
  } else if (text === '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' || text === 'stats') {
    ctx.reply(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –ú–µ—Å—è—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤: ${Object.keys(timesDb).length}
    `);
  } else if (text === '–¥–µ–Ω—å' || text === 'day') {
      const prayerTimesMessage = getPrayerTimesForToday();
      ctx.reply(prayerTimesMessage, { parse_mode: 'HTML' });
  } else if (text === '–º–µ—Å—è—Ü' || text === 'month') {
      const now = new Date();
      const monthNameEnglish = now.toLocaleString('en-GB', { month: 'long' });

      const tableMessage = getPrayerTimesTableForMonth(monthNameEnglish);
      ctx.reply(tableMessage, { parse_mode: 'HTML' });
  } else if (text === '–≥–æ–¥' || text === 'year') {
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList());
  } else {
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å "—Ü–∏—Ç–∞—Ç–∞" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /newquote –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã!\n–ò–ª–∏ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä\n–ò–ª–∏ /day, /month, /year –¥–ª—è –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–æ–≤ üïå');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  const data = ctx.callbackQuery.data;

  if (data === 'new_quote') {
    const quote = getRandomQuote();
    const message = `‚ùù ${quote.text} ‚ùû\n\n‚Äî ${quote.author}`;

    await ctx.answerCbQuery();
    await ctx.editMessageText(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ï—â–µ —Ü–∏—Ç–∞—Ç—É', callback_data: 'new_quote' }]
        ]
      }
    });
  } else if (data.startsWith('month_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏–∑ /year
      const selectedRussianMonth = data.split('_')[1];
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ
      const selectedEnglishMonth = getEnglishMonthName(selectedRussianMonth);

      if (!selectedEnglishMonth) {
           await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
           return;
      }

      const tableMessage = getPrayerTimesTableForMonth(selectedEnglishMonth);

      await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
       await ctx.reply(tableMessage, { parse_mode: 'HTML' });
      // –ò–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
      // await ctx.editMessageText(tableMessage, { parse_mode: 'HTML' });
  }
});

// Webhook handler –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('OK');
  } catch (error) {
    console.error('Error handling update:', error);
    res.status(500).send('Error');
  }
};

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
if (process.env.NODE_ENV !== 'production') {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!');
  console.log(`–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}`);
}