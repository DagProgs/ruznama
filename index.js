/**
 * üïå –†—É–∑–Ω–∞–º–∞ ‚Äî –ë–æ—Ç –≤—Ä–µ–º—ë–Ω –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –ö—É—Ä–∞—Ö—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞
 * 
 * @author Developer
 * @license MIT
 * @version 1.0.0
 */

const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');

// ========================================================
// üõë –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê
// ========================================================
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}

const bot = new Telegraf(BOT_TOKEN);

// ========================================================
// üìÅ –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú
// ========================================================
const citiesAreasPath = path.join(__dirname, 'db', 'cities-areas.json');
const timesDir = path.join(__dirname, 'db', 'cities-areas');
const usersFilePath = path.join(__dirname, 'users.json');

// ========================================================
// üåç –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: –ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã
// ========================================================
/** @type {{ cities: Array<{id: string, name_cities: string}>, areas: Array<{id: string, name_areas: string}> }} */
let citiesAreasData = { cities: [], areas: [] };

try {
  if (fs.existsSync(citiesAreasPath)) {
    citiesAreasData = JSON.parse(fs.readFileSync(citiesAreasPath, 'utf8'));
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${citiesAreasData.cities.length} –≥–æ—Ä–æ–¥–æ–≤ –∏ ${citiesAreasData.areas.length} —Ä–∞–π–æ–Ω–æ–≤`);
  } else {
    console.warn('‚ö†Ô∏è –§–∞–π–ª cities-areas.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (e) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cities-areas.json:', e.message);
}

// ========================================================
// üìÜ –ú–ê–ü–ü–ò–ù–ì –ú–ï–°–Ø–¶–ï–í: –†—É—Å—Å–∫–∏–µ ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
// ========================================================
const russianToEnglishMonth = {
  —è–Ω–≤–∞—Ä—å: 'January',
  —Ñ–µ–≤—Ä–∞–ª—å: 'February',
  –º–∞—Ä—Ç: 'March',
  –∞–ø—Ä–µ–ª—å: 'April',
  –º–∞–π: 'May',
  –∏—é–Ω—å: 'June',
  –∏—é–ª—å: 'July',
  –∞–≤–≥—É—Å—Ç: 'August',
  —Å–µ–Ω—Ç—è–±—Ä—å: 'September',
  –æ–∫—Ç—è–±—Ä—å: 'October',
  –Ω–æ—è–±—Ä—å: 'November',
  –¥–µ–∫–∞–±—Ä—å: 'December'
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ
 * @param {string} ruMonth - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ 'now'
 * @returns {string|null}
 */
function getEnglishMonthName(ruMonth) {
  if (ruMonth === 'now') {
    return new Date().toLocaleString('en-GB', { month: 'long' });
  }
  const lower = ruMonth.toLowerCase().trim();
  return russianToEnglishMonth[lower] || null;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —Ä—É—Å—Å–∫–æ–µ
 * @param {string} enMonth
 * @returns {string}
 */
function getRussianMonthName(enMonth) {
  const entry = Object.entries(russianToEnglishMonth).find(([, eng]) => eng === enMonth);
  return entry ? entry[0] : enMonth;
}

// ========================================================
// üï∞Ô∏è –ó–ê–ì–†–£–ó–ö–ê –í–†–ï–ú–Å–ù –ü–û ID
// ========================================================
/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –ø–æ ID
 * @param {string} id
 * @returns {Object|null}
 */
function loadTimesById(id) {
  const filePath = path.join(timesDir, `${id}.json`);
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      const parsed = JSON.parse(data);
      return Object.keys(parsed).length ? parsed : null;
    }
    return null;
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, e.message);
    return null;
  }
}

// ========================================================
// üïê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò
// ========================================================
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è [—á–∞—Å, –º–∏–Ω—É—Ç–∞] ‚Üí "HH:MM"
 * @param {Array<number>} time
 * @returns {string}
 */
function fmt(time) {
  return Array.isArray(time) && time.length >= 2
    ? `${String(time[0]).padStart(2, '0')}:${String(time[1]).padStart(2, '0')}`
    : '‚Äî';
}

// ========================================================
// üìÖ –í–†–ï–ú–ï–ù–ê –ù–ê –°–ï–ì–û–î–ù–Ø
// ========================================================
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
 * @param {Object} timesData
 * @returns {string}
 */
function getPrayerTimesForToday(timesData) {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);
  const monthData = timesData[monthEn];

  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;
  const dayData = monthData[day];
  if (!dayData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${day} ${monthRuCap}`;

  return `
üìÖ <b>${day} ${monthRuCap}</b>
üïå <b>–§–∞–¥–∂—Ä</b>:    <code>${fmt(dayData.Fajr)}</code>
üåÖ <b>–í–æ—Å—Ö–æ–¥</b>:   <code>${fmt(dayData.Sunrise)}</code>
‚òÄÔ∏è <b>–ó—É—Ö—Ä</b>:     <code>${fmt(dayData.Dhuhr)}</code>
üåá <b>–ê—Å—Ä</b>:      <code>${fmt(dayData.Asr)}</code>
üåÜ <b>–ú–∞–≥—Ä–∏–±</b>:   <code>${fmt(dayData.Maghrib)}</code>
üåô <b>–ò—à–∞</b>:      <code>${fmt(dayData.Isha)}</code>
`.trim();
}

// ========================================================
// üìÜ –¢–ê–ë–õ–ò–¶–ê –ù–ê –ú–ï–°–Ø–¶
// ========================================================
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤—Ä–µ–º—ë–Ω –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ –º–µ—Å—è—Ü
 * @param {Object} timesData
 * @param {string} monthEn
 * @returns {string}
 */
function getPrayerTimesTableForMonth(timesData, monthEn) {
  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;

  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);
  const dayW = 3, timeW = 5;

  let table = `<pre>`;
  table += `–î`.padEnd(dayW + 1, ' ') +
           `–§`.padEnd(timeW + 1, ' ') +
           `–í`.padEnd(timeW + 1, ' ') +
           `–ó`.padEnd(timeW + 1, ' ') +
           `–ê`.padEnd(timeW + 1, ' ') +
           `–ú`.padEnd(timeW + 1, ' ') +
           `–ò`.padEnd(timeW + 1, ' ') + '\n';
  table += '‚îÄ'.repeat(dayW + timeW * 6 + 6) + '\n';

  for (let d = 1; d <= 31; d++) {
    const dayStr = String(d).padStart(2, '0');
    const dayData = monthData[dayStr];
    let row = d.toString().padEnd(dayW + 1, ' ');

    if (dayData) {
      row += fmt(dayData.Fajr).padEnd(timeW + 1, ' ') +
             fmt(dayData.Sunrise).padEnd(timeW + 1, ' ') +
             fmt(dayData.Dhuhr).padEnd(timeW + 1, ' ') +
             fmt(dayData.Asr).padEnd(timeW + 1, ' ') +
             fmt(dayData.Maghrib).padEnd(timeW + 1, ' ') +
             fmt(dayData.Isha).padEnd(timeW + 1, ' ');
    } else {
      row += ' '.repeat(timeW * 6 + 5);
    }
    table += row + '\n';
  }
  table += '</pre>';

  return `üïå <b>–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ ‚Äî ${monthRuCap}</b>\n${table}`;
}

// ========================================================
// üóìÔ∏è –ö–õ–ê–í–ò–ê–¢–£–†–ê: –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
// ========================================================
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—è—Ü–∞–º–∏
 * @param {string} locationId
 * @returns {Object}
 */
function getMonthsList(locationId) {
  const keyboard = Object.keys(russianToEnglishMonth)
    .map(month => ({
      text: month.charAt(0).toUpperCase() + month.slice(1),
      callback_data: `select_month_${month}_${locationId}`
    }))
    .reduce((acc, btn, index) => {
      if (index % 3 === 0) acc.push([]);
      acc[acc.length - 1].push(btn);
      return acc;
    }, []);

  keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `back_to_loc_${locationId}` }]);
  return { reply_markup: { inline_keyboard: keyboard } };
}

// ========================================================
// üìç –ú–ï–ù–Æ –ú–ï–°–¢–ê
// ========================================================
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
 * @param {string} locationId
 * @returns {Object}
 */
function getLocationMenu(locationId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üïå –°–µ–≥–æ–¥–Ω—è', callback_data: `day_${locationId}` }],
        [{ text: 'üìÖ –ú–µ—Å—è—Ü', callback_data: `month_${locationId}` }],
        [{ text: 'üóìÔ∏è –ì–æ–¥', callback_data: `year_${locationId}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]
      ]
    }
  };
}

// ========================================================
// üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
// ========================================================
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üèôÔ∏è –ì–æ—Ä–æ–¥–∞', callback_data: 'cmd_cities' }],
      [{ text: 'üèòÔ∏è –†–∞–π–æ–Ω—ã', callback_data: 'cmd_areas' }],
      [{ text: 'üìñ –•–∞–¥–∏—Å –¥–Ω—è', callback_data: 'cmd_quote' }]
    ]
  }
};

// ========================================================
// üë• –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
// ========================================================
/** @type {Set<string>} */
let users = new Set();

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const loaded = JSON.parse(fs.readFileSync(usersFilePath, 'utf8'));
      users = new Set(loaded);
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${users.size}`);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json:', e.message);
  }
}

function saveUsers() {
  try {
    fs.writeFileSync(usersFilePath, JSON.stringify([...users]), 'utf8');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json:', e.message);
  }
}

function addUser(userId) {
  const id = userId.toString();
  if (!users.has(id)) {
    users.add(id);
    saveUsers();
    console.log(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id} | –í—Å–µ–≥–æ: ${users.size}`);
  }
}

// ========================================================
// üìú –•–ê–î–ò–° –î–ù–Ø
// ========================================================
const quotes = require('./quotes.json');

function getRandomQuote() {
  return quotes[Math.floor(Math.random() * quotes.length)];
}

// ========================================================
// üîç –ü–û–ò–°–ö –ü–û –ù–ê–ó–í–ê–ù–ò–Æ
// ========================================================
/**
 * –ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 * @param {string} query
 * @returns {Array<{id: string, name_cities?: string, name_areas?: string}>}
 */
function searchLocations(query) {
  const allLocations = [...citiesAreasData.cities, ...citiesAreasData.areas];
  const lowerQuery = query.toLowerCase().trim();
  return allLocations
    .filter(loc => {
      const name = (loc.name_cities || loc.name_areas || '').toLowerCase();
      return name.includes(lowerQuery);
    })
    .slice(0, 10);
}

// ========================================================
// üöÄ –ö–û–ú–ê–ù–î–ê /start
// ========================================================
bot.start((ctx) => {
  addUser(ctx.from.id);
  ctx.replyWithHTML(
    `üïå <b>–†—É–∑–Ω–∞–º–∞ ‚Äî –ö—É—Ä–∞—Ö—Å–∫–∏–π —Ä–∞–π–æ–Ω</b>\n` +
    `¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏)\n\n` +
    `üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞/—Ä–∞–π–æ–Ω–∞:`,
    mainMenu
  );
});

// ========================================================
// üÜò /help
// ========================================================
bot.command('help', (ctx) => {
  ctx.replyWithHTML(
    `üìò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n` +
    `/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
    `/help ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
    `/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n` +
    `/about ‚Äî –û –±–æ—Ç–µ\n` +
    `/newquote ‚Äî –ù–æ–≤—ã–π —Ö–∞–¥–∏—Å\n` +
    `/day ‚Äî –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n` +
    `/month ‚Äî –¢–∞–±–ª–∏—Ü–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n` +
    `/year ‚Äî –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∑–∞ –≥–æ–¥`
  );
});

// ========================================================
// üìä /stats
// ========================================================
bot.command('stats', (ctx) => {
  ctx.replyWithHTML(
    `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${users.size}</b>\n` +
    `üèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤: <b>${citiesAreasData.cities.length}</b>\n` +
    `üèòÔ∏è –†–∞–π–æ–Ω–æ–≤: <b>${citiesAreasData.areas.length}</b>\n` +
    `üïå –í—Å–µ–≥–æ –º–µ—Å—Ç: <b>${citiesAreasData.cities.length + citiesAreasData.areas.length}</b>`
  );
});

// ========================================================
// ‚ÑπÔ∏è /about
// ========================================================
bot.command('about', (ctx) => {
  ctx.replyWithHTML(
    `‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n` +
    `üïå <b>–†—É–∑–Ω–∞–º–∞ ‚Äî –ö—É—Ä–∞—Ö—Å–∫–∏–π —Ä–∞–π–æ–Ω</b>\n` +
    `–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤ –ö—É—Ä–∞—Ö—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞.\n` +
    `üì© –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–µ—Ä—É—é—â–∏—Ö.\n` +
    `¬© 2025`
  );
});

// ========================================================
// üÜï /newquote
// ========================================================
bot.command('newquote', (ctx) => {
  const q = getRandomQuote();
  ctx.replyWithHTML(
    `üìò <b>–•–∞–¥–∏—Å –¥–Ω—è</b>\n` +
    `‚ùù ${q.text} ‚ùû\n` +
    `‚Äî <i>${q.author}</i>`
  );
});

// ========================================================
// üïê /day ‚Äî –∑–∞–≥–ª—É—à–∫–∞
// ========================================================
bot.command('day', (ctx) => {
  ctx.replyWithHTML(
    '‚è≥ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
    mainMenu
  );
});

// ========================================================
// üìÖ /month ‚Äî –∑–∞–≥–ª—É—à–∫–∞
// ========================================================
bot.command('month', (ctx) => {
  ctx.replyWithHTML(
    '‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.',
    mainMenu
  );
});

// ========================================================
// üóìÔ∏è /year ‚Äî –∑–∞–≥–ª—É—à–∫–∞
// ========================================================
bot.command('year', (ctx) => {
  ctx.replyWithHTML('üóìÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.', mainMenu);
});

// ========================================================
// üî§ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê (–ø–æ–∏—Å–∫)
// ========================================================
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  if (text.startsWith('/')) return;

  addUser(ctx.from.id);

  const results = searchLocations(text);
  if (results.length === 0) {
    return ctx.replyWithHTML(
      `üîç <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´${text}¬ª</b>.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`,
      mainMenu
    );
  }

  const keyboard = results.map(loc => [{
    text: `üìç ${loc.name_cities || loc.name_areas}`,
    callback_data: `loc_${loc.id}`
  }]);

  await ctx.replyWithHTML(
    `üîç <b>–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>`,
    { reply_markup: { inline_keyboard: keyboard } }
  );
});

// ========================================================
// üîò –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö
// ========================================================
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  try {
    await ctx.answerCbQuery();
  } catch (e) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback:', e.message);
  }

  // üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (data === 'cmd_cities_areas') {
    return await ctx.editMessageText('üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
      parse_mode: 'HTML',
      ...mainMenu
    });
  }

  // üèôÔ∏è –ì–æ—Ä–æ–¥–∞
  if (data === 'cmd_cities') {
    if (!citiesAreasData.cities.length) {
      return await ctx.editMessageText('üì≠ –ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.', {
        parse_mode: 'HTML',
        ...mainMenu
      });
    }
    const keyboard = citiesAreasData.cities.map(c => [{
      text: `üèôÔ∏è ${c.name_cities}`,
      callback_data: `loc_${c.id}`
    }]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);

    return await ctx.editMessageText('<b>üåÜ –ì–æ—Ä–æ–¥–∞</b>', {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // üèòÔ∏è –†–∞–π–æ–Ω—ã
  if (data === 'cmd_areas') {
    if (!citiesAreasData.areas.length) {
      return await ctx.editMessageText('üì≠ –ù–µ—Ç —Ä–∞–π–æ–Ω–æ–≤.', {
        parse_mode: 'HTML',
        ...mainMenu
      });
    }
    const keyboard = citiesAreasData.areas.map(a => [{
      text: `üèòÔ∏è ${a.name_areas}`,
      callback_data: `loc_${a.id}`
    }]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);

    return await ctx.editMessageText('<b>üèòÔ∏è –†–∞–π–æ–Ω—ã</b>', {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // üìç –í—ã–±–æ—Ä –º–µ—Å—Ç–∞
  if (data.startsWith('loc_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) {
      return await ctx.editMessageText(
        `‚è≥ –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è <b>${location.name_cities || location.name_areas}</b> –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`,
        { parse_mode: 'HTML', ...mainMenu }
      );
    }

    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç <b>–í—ã –≤—ã–±—Ä–∞–ª–∏: ${name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // üïê –°–µ–≥–æ–¥–Ω—è
  if (data.startsWith('day_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', {
      parse_mode: 'HTML',
      ...mainMenu
    });

    const msg = getPrayerTimesForToday(timesData);
    const name = location.name_cities || location.name_areas;

    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // üìÖ –ú–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π)
  if (data.startsWith('month_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', {
      parse_mode: 'HTML',
      ...mainMenu
    });

    const monthEn = getEnglishMonthName('now');
    const msg = getPrayerTimesTableForMonth(timesData, monthEn);
    const name = location.name_cities || location.name_areas;

    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // üóìÔ∏è –ì–æ–¥ ‚Üí –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
  if (data.startsWith('year_')) {
    const id = data.split('_')[1];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', {
      parse_mode: 'HTML',
      ...mainMenu
    });

    return await ctx.editMessageText('üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList(id));
  }

  // üìÖ –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
  if (data.startsWith('select_month_')) {
    const parts = data.split('_');
    const ruMonth = parts.slice(2, -1).join('_');
    const locationId = parts[parts.length - 1];
    const enMonth = getEnglishMonthName(ruMonth);

    if (!enMonth) return await ctx.editMessageText('‚ùå –ú–µ—Å—è—Ü –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.', getLocationMenu(locationId));

    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == locationId);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(locationId);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', {
      parse_mode: 'HTML',
      ...mainMenu
    });

    const msg = getPrayerTimesTableForMonth(timesData, enMonth);
    const name = location.name_cities || location.name_areas;

    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n${msg}`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(locationId)
      }
    );
  }

  // üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Å—Ç—É
  if (data.startsWith('back_to_loc_')) {
    const id = data.split('_')[3];
    const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
    if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const timesData = loadTimesById(id);
    if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', {
      parse_mode: 'HTML',
      ...mainMenu
    });

    const name = location.name_cities || location.name_areas;
    return await ctx.editMessageText(
      `üìç <b>${name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
      {
        parse_mode: 'HTML',
        ...getLocationMenu(id)
      }
    );
  }

  // üìú –•–∞–¥–∏—Å –¥–Ω—è
  if (data === 'cmd_quote') {
    const q = getRandomQuote();
    return await ctx.editMessageText(
      `üìò <b>–•–∞–¥–∏—Å –¥–Ω—è</b>\n` +
      `‚ùù ${q.text} ‚ùû\n` +
      `‚Äî <i>${q.author}</i>`,
      {
        parse_mode: 'HTML',
        ...mainMenu
      }
    );
  }
});

// ========================================================
// üöÄ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// ========================================================
loadUsers();

// ========================================================
// ‚òÅÔ∏è Vercel Webhook
// ========================================================
module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    const body = await new Promise((resolve, reject) => {
      let data = '';
      req.on('data', chunk => data += chunk);
      req.on('end', () => resolve(data));
      req.on('error', reject);
    });

    const update = JSON.parse(body);
    await bot.handleUpdate(update);
    res.status(200).json({ ok: true });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Webhook:', e.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// ========================================================
// üíª –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö
// ========================================================
if (process.env.NODE_ENV !== 'production') {
  bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  });
}