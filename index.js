/**
 * üïå –†—É–∑–Ω–∞–º–∞ ‚Äî –ë–æ—Ç –≤—Ä–µ–º—ë–Ω –Ω–∞–º–∞–∑–æ–≤ –†–î
 *
 * @author Developer
 * @license MIT
 * @version 1.3.1 (—Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞)
 */
import { Telegraf } from 'telegraf';
import fs from 'fs';
import path from 'path';

// ========================================================
// üõë –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê
// ========================================================
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}
const bot = new Telegraf(BOT_TOKEN);

// ========================================================
// üìÅ –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú
// ========================================================
const citiesAreasPath = path.join(process.cwd(), 'db', 'cities-areas.json');
const timesDir = path.join(process.cwd(), 'db', 'cities-areas');
const usersFilePath = path.join(process.cwd(), 'users.json');

// ========================================================
// üåç –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: –ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã
// ========================================================
let citiesAreasData = { cities: [], areas: [] };
try {
  if (fs.existsSync(citiesAreasPath)) {
    citiesAreasData = JSON.parse(fs.readFileSync(citiesAreasPath, 'utf8'));
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${citiesAreasData.cities.length} –≥–æ—Ä–æ–¥–æ–≤ –∏ ${citiesAreasData.areas.length} —Ä–∞–π–æ–Ω–æ–≤`);
  } else {
    console.warn('‚ö†Ô∏è –§–∞–π–ª cities-areas.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (e) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cities-areas.json:', e.message);
}

// ========================================================
// üìÜ –ú–ê–ü–ü–ò–ù–ì –ú–ï–°–Ø–¶–ï–í: –†—É—Å ‚Üí –ê–Ω–≥–ª
// ========================================================
const russianToEnglishMonth = {
  —è–Ω–≤–∞—Ä—å: 'January',
  —Ñ–µ–≤—Ä–∞–ª—å: 'February',
  –º–∞—Ä—Ç: 'March',
  –∞–ø—Ä–µ–ª—å: 'April',
  –º–∞–π: 'May',
  –∏—é–Ω—å: 'June',
  –∏—é–ª—å: 'July',
  –∞–≤–≥—É—Å—Ç: 'August',
  —Å–µ–Ω—Ç—è–±—Ä—å: 'September',
  –æ–∫—Ç—è–±—Ä—å: 'October',
  –Ω–æ—è–±—Ä—å: 'November',
  –¥–µ–∫–∞–±—Ä—å: 'December',
};

function getEnglishMonthName(ruMonth) {
  if (ruMonth === 'now') {
    return new Date().toLocaleString('en-GB', { month: 'long' });
  }
  const lower = ruMonth.toLowerCase().trim();
  return russianToEnglishMonth[lower] || null;
}

function getRussianMonthName(enMonth) {
  const entry = Object.entries(russianToEnglishMonth).find(([, eng]) => eng === enMonth);
  return entry ? entry[0] : enMonth;
}

// ========================================================
// üï∞Ô∏è –ó–ê–ì–†–£–ó–ö–ê –í–†–ï–ú–Å–ù –ü–û ID
// ========================================================
function loadTimesById(id) {
  const filePath = path.join(timesDir, `${id}.json`);
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      const parsed = JSON.parse(data);
      return Object.keys(parsed).length ? parsed : null;
    }
    return null;
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, e.message);
    return null;
  }
}

// ========================================================
// üïê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò
// ========================================================
function fmt(time) {
  return Array.isArray(time) && time.length >= 2
    ? `${String(time[0]).padStart(2, '0')}:${String(time[1]).padStart(2, '0')}`
    : '‚Äî';
}

// ========================================================
// üìÖ –í–†–ï–ú–ï–ù–ê –ù–ê –°–ï–ì–û–î–ù–Ø (—á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç)
// ========================================================
function getPrayerTimesForToday(timesData) {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);
  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthRuCap}`;
  const dayData = monthData[day];
  if (!dayData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${day} ${monthRuCap}`;

  return `
‚ú® –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üìÖ ${day} ${monthRuCap}
üïå –§–∞–¥–∂—Ä   ‚Äî ${fmt(dayData.Fajr)}
üåÖ –®—É—Ä—É–∫   ‚Äî ${fmt(dayData.Sunrise)}
‚òÄÔ∏è –ó—É—Ö—Ä    ‚Äî ${fmt(dayData.Dhuhr)}
üåá –ê—Å—Ä     ‚Äî ${fmt(dayData.Asr)}
üåÜ –ú–∞–≥—Ä–∏–±  ‚Äî ${fmt(dayData.Maghrib)}
üåô –ò—à–∞     ‚Äî ${fmt(dayData.Isha)}
üïã –ü—É—Å—Ç—å –≤–∞—à –Ω–∞–º–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.
`.trim();
}

// ========================================================
// üìÜ –¢–ê–ë–õ–ò–¶–ê –ù–ê –ú–ï–°–Ø–¶ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è, —É–∑–∫–∞—è)
// ========================================================
function getPrayerTimesTableForMonth(timesData, monthEn) {
  const monthData = timesData[monthEn];
  if (!monthData) return `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${monthEn}`;
  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const col = { day: 2, time: 5 };
  let table = '';

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  table += `–î `.padEnd(col.day + 1) +
           `–§–∞–¥–∂.`.padEnd(col.time + 1) +
           `–®—É—Ä.`.padEnd(col.time + 1) +
           `–ó—É—Ö—Ä`.padEnd(col.time + 1) +
           `–ê—Å—Ä `.padEnd(col.time + 1) +
           `–ú–∞–≥—Ä.`.padEnd(col.time + 1) +
           `–ò—à–∞ `.padEnd(col.time + 1) + '\n';
  table += '‚îÄ'.repeat(col.day + col.time * 6 + 6) + '\n';

  for (let d = 1; d <= 31; d++) {
    const dayStr = String(d).padStart(2, '0');
    const dayData = monthData[dayStr];
    let row = d.toString().padEnd(col.day + 1);
    if (dayData) {
      row += fmt(dayData.Fajr).padEnd(col.time + 1) +
             fmt(dayData.Sunrise).padEnd(col.time + 1) +
             fmt(dayData.Dhuhr).padEnd(col.time + 1) +
             fmt(dayData.Asr).padEnd(col.time + 1) +
             fmt(dayData.Maghrib).padEnd(col.time + 1) +
             fmt(dayData.Isha).padEnd(col.time + 1);
    } else {
      row += ' '.repeat(col.time * 6 + 6);
    }
    table += row + '\n';
  }

  return `
üóìÔ∏è –ù–∞–º–∞–∑—ã ‚Äî ${monthRuCap}
\`\`\`
${table.trim()}
\`\`\`
`.trim();
}

// ========================================================
// üóìÔ∏è –ö–õ–ê–í–ò–ê–¢–£–†–ê: –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (3 –≤ —Å—Ç—Ä–æ–∫—É)
// ========================================================
function getMonthsList(locationId) {
  const keyboard = Object.keys(russianToEnglishMonth)
    .map((month) => ({
      text: capitalize(month),
      callback_data: `select_month_${month}_${locationId}`,
    }))
    .reduce((acc, btn, idx) => {
      if (idx % 3 === 0) acc.push([]);
      acc[acc.length - 1].push(btn);
      return acc;
    }, []);
  keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `back_to_loc_${locationId}` }]);
  return { reply_markup: { inline_keyboard: keyboard } };
}

// ========================================================
// üìç –ú–ï–ù–Æ –ú–ï–°–¢–ê
// ========================================================
function getLocationMenu(locationId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üïå –°–µ–≥–æ–¥–Ω—è', callback_data: `day_${locationId}` }],
        [{ text: 'üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', callback_data: `month_${locationId}` }],
        [{ text: 'üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü', callback_data: `year_${locationId}` }],
        [],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'cmd_cities_areas' }],
      ],
    },
  };
}

// ========================================================
// üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
// ========================================================
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üèôÔ∏è –ì–æ—Ä–æ–¥–∞', callback_data: 'cmd_cities' },
        { text: 'üèòÔ∏è –†–∞–π–æ–Ω—ã', callback_data: 'cmd_areas' },
      ],
      [{ text: 'üìñ –•–∞–¥–∏—Å –¥–Ω—è', callback_data: 'cmd_quote' }],
      [
        { text: '‚ÑπÔ∏è –û –±–æ—Ç–µ', callback_data: 'cmd_about' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'cmd_stats' },
      ],
    ],
  },
};

// ========================================================
// üë• –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò + –ü–û–°–õ–ï–î–ù–ï–ï –ú–ï–°–¢–û
// ========================================================
let users = new Map(); // id ‚Üí { last_location_id }

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const loaded = JSON.parse(fs.readFileSync(usersFilePath, 'utf8'));
      users = new Map(loaded);
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${users.size}`);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json:', e.message);
  }
}

function saveUsers() {
  try {
    const serializable = Array.from(users.entries());
    fs.writeFileSync(usersFilePath, JSON.stringify(serializable), 'utf8');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json:', e.message);
  }
}

function addUser(userId) {
  const id = userId.toString();
  if (!users.has(id)) {
    users.set(id, { last_location_id: null });
    saveUsers();
    console.log(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id} | –í—Å–µ–≥–æ: ${users.size}`);
  }
}

function setLastLocation(userId, locationId) {
  const id = userId.toString();
  if (!users.has(id)) addUser(id);
  users.get(id).last_location_id = locationId;
  saveUsers();
}

function getLastLocation(userId) {
  const id = userId.toString();
  const user = users.get(id);
  return user ? user.last_location_id : null;
}

// ========================================================
// üìú –•–ê–î–ò–° –î–ù–Ø
// ========================================================
let quotes = [];

function loadQuotes() {
  try {
    const quotesPath = path.join(process.cwd(), 'quotes.json');
    if (fs.existsSync(quotesPath)) {
      quotes = JSON.parse(fs.readFileSync(quotesPath, 'utf8'));
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–∞–¥–∏—Å–æ–≤: ${quotes.length}`);
    } else {
      console.error('‚ùå quotes.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      quotes = [{ text: '–•–∞–¥–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', author: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è' }];
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ quotes.json:', e.message);
    quotes = [{ text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞–¥–∏—Å–∞.', author: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è' }];
  }
}

function getRandomQuote() {
  if (!quotes.length) return { text: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–∞–¥–∏—Å–æ–≤.', author: '–°–∏—Å—Ç–µ–º–∞' };
  return quotes[Math.floor(Math.random() * quotes.length)];
}

// ========================================================
// üîç –ü–û–ò–°–ö –ü–û –ù–ê–ó–í–ê–ù–ò–Æ
// ========================================================
function searchLocations(query) {
  const allLocations = [...citiesAreasData.cities, ...citiesAreasData.areas];
  const lowerQuery = query.toLowerCase().trim();
  return allLocations
    .filter((loc) => (loc.name_cities || loc.name_areas || '').toLowerCase().includes(lowerQuery))
    .slice(0, 10);
}

// ========================================================
// üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞: –ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
// ========================================================
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// ========================================================
// üöÄ –ö–û–ú–ê–ù–î–ê /start
// ========================================================
bot.start((ctx) => {
  const userId = ctx.from.id;
  addUser(userId);

  let text = `üïå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–†—É–∑–Ω–∞–º–∞¬ª\n`;
  text += `¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏)\n`;
  text += `üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n`;
  text += `üïã –ë–ª–∞–≥–æ–¥–∞—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è.`;

  return ctx.reply(text, { parse_mode: 'MarkdownV2', ...mainMenu }).catch(console.error);
});

// ========================================================
// üÜò /help
// ========================================================
bot.command('help', (ctx) => {
  let text = `üìò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n`;
  text += `‚Ä¢ /start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n`;
  text += `‚Ä¢ /help ‚Äî –ü–æ–º–æ—â—å\n`;
  text += `‚Ä¢ /stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
  text += `‚Ä¢ /about ‚Äî –û –ø—Ä–æ–µ–∫—Ç–µ\n`;
  text += `‚Ä¢ /newquote ‚Äî –ù–æ–≤—ã–π —Ö–∞–¥–∏—Å\n`;
  text += `‚Ä¢ /day ‚Äî –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n`;
  text += `‚Ä¢ /month ‚Äî –¢–∞–±–ª–∏—Ü–∞ –Ω–∞ –º–µ—Å—è—Ü`;

  return ctx.reply(text, { parse_mode: 'MarkdownV2' }).catch(console.error);
});

// ========================================================
// üìä /stats
// ========================================================
bot.command('stats', (ctx) => {
  const text = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n`;
  text += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${users.size}\`\n`;
  text += `üèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤: \`${citiesAreasData.cities.length}\`\n`;
  text += `üèòÔ∏è –†–∞–π–æ–Ω–æ–≤: \`${citiesAreasData.areas.length}\`\n`;
  text += `üïå –í—Å–µ–≥–æ –º–µ—Å—Ç: \`${citiesAreasData.cities.length + citiesAreasData.areas.length}\``;

  return ctx.reply(text, { parse_mode: 'MarkdownV2' }).catch(console.error);
});

// ========================================================
// ‚ÑπÔ∏è /about
// ========================================================
bot.command('about', (ctx) => {
  const text = `‚ÑπÔ∏è –û –±–æ—Ç–µ ¬´–†—É–∑–Ω–∞–º–∞¬ª\n`;
  text += `üïå –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤.\n`;
  text += `üì© –°–æ–∑–¥–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π –æ –≤–µ—Ä—É—é—â–∏—Ö.\n`;
  text += `¬© 2025 | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º`;

  return ctx.reply(text, { parse_mode: 'MarkdownV2' }).catch(console.error);
});

// ========================================================
// üÜï /newquote
// ========================================================
bot.command('newquote', (ctx) => {
  const q = getRandomQuote();
  const text = `üìò –•–∞–¥–∏—Å –¥–Ω—è\n`;
  text += `‚ùù ${q.text} ‚ùû\n`;
  text += `‚Äî ${q.author}`;

  return ctx.reply(text, { parse_mode: 'MarkdownV2' }).catch(console.error);
});

// ========================================================
// üïê /day ‚Äî –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Å—Ç–æ–º)
// ========================================================
bot.command('day', async (ctx) => {
  const userId = ctx.from.id;
  const lastId = getLastLocation(userId);
  if (!lastId) {
    return ctx.reply(
      '‚è≥ –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
      mainMenu
    ).catch(console.error);
  }

  const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == lastId);
  if (!location) return ctx.reply('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

  const timesData = loadTimesById(lastId);
  if (!timesData) return ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');

  const name = location.name_cities || location.name_areas;
  const msg = getPrayerTimesForToday(timesData);
  await ctx.reply(`üìç ${name}\n${msg}`, { parse_mode: 'MarkdownV2' });
});

// ========================================================
// üìÖ /month ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ –º–µ—Å—è—Ü
// ========================================================
bot.command('month', async (ctx) => {
  const userId = ctx.from.id;
  const lastId = getLastLocation(userId);
  if (!lastId) {
    return ctx.reply('üìÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ.', mainMenu);
  }

  const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == lastId);
  if (!location) return ctx.reply('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

  const timesData = loadTimesById(lastId);
  if (!timesData) return ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');

  const monthEn = getEnglishMonthName('now');
  const msg = getPrayerTimesTableForMonth(timesData, monthEn);
  const name = location.name_cities || location.name_areas;
  await ctx.reply(`üìç ${name}\n${msg}`, { parse_mode: 'MarkdownV2' });
});

// ========================================================
// üî§ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê (–ø–æ–∏—Å–∫)
// ========================================================
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  if (text.startsWith('/')) return;

  const userId = ctx.from.id;
  addUser(userId);

  const results = searchLocations(text);
  if (results.length === 0) {
    return ctx.reply(
      `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´${text}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.`,
      mainMenu
    ).catch(console.error);
  }

  const keyboard = results.map((loc) => [
    {
      text: `${loc.name_cities ? 'üèôÔ∏è' : 'üèòÔ∏è'} ${loc.name_cities || loc.name_areas}`,
      callback_data: `loc_${loc.id}`,
    },
  ]);
  await ctx.reply(
    `üîç –ù–∞–π–¥–µ–Ω–æ ${results.length}:`,
    { reply_markup: { inline_keyboard: keyboard } }
  ).catch(console.error);
});

// ========================================================
// üîò –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö
// ========================================================
bot.on('callback_query', async (ctx) => {
  if (!ctx.callbackQuery || !ctx.callbackQuery.data) return;
  const data = ctx.callbackQuery.data;
  const userId = ctx.callbackQuery.from.id;
  addUser(userId);

  try {
    await ctx.answerCbQuery().catch(() => {});
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback:', err.message);
  }

  try {
    // üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'cmd_cities_areas') {
      return await ctx.editMessageText('üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', mainMenu);
    }

    // üèôÔ∏è –ì–æ—Ä–æ–¥–∞
    if (data === 'cmd_cities') {
      if (!citiesAreasData.cities.length) {
        return await ctx.editMessageText('üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.', mainMenu);
      }
      const keyboard = citiesAreasData.cities.map((c) => [
        { text: `üèôÔ∏è ${c.name_cities}`, callback_data: `loc_${c.id}` },
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);
      return await ctx.editMessageText('üåÜ –ì–æ—Ä–æ–¥–∞', { reply_markup: { inline_keyboard: keyboard } });
    }

    // üèòÔ∏è –†–∞–π–æ–Ω—ã
    if (data === 'cmd_areas') {
      if (!citiesAreasData.areas.length) {
        return await ctx.editMessageText('üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤.', mainMenu);
      }
      const keyboard = citiesAreasData.areas.map((a) => [
        { text: `üèòÔ∏è ${a.name_areas}`, callback_data: `loc_${a.id}` },
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'cmd_cities_areas' }]);
      return await ctx.editMessageText('üèòÔ∏è –†–∞–π–æ–Ω—ã', { reply_markup: { inline_keyboard: keyboard } });
    }

    // üìç –í—ã–±–æ—Ä –º–µ—Å—Ç–∞
    if (data.startsWith('loc_')) {
      const id = data.split('_')[1];
      const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
      if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

      const timesData = loadTimesById(id);
      const name = location.name_cities || location.name_areas;
      if (!timesData) {
        return await ctx.editMessageText(
          `‚è≥ –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è ${name} –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`,
          mainMenu
        );
      }

      setLastLocation(userId, id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ
      return await ctx.editMessageText(
        `üìç ${name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`,
        getLocationMenu(id)
      );
    }

    // üïê –°–µ–≥–æ–¥–Ω—è
    if (data.startsWith('day_')) {
      const id = data.split('_')[1];
      setLastLocation(userId, id); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º
      const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
      if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

      const timesData = loadTimesById(id);
      if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);

      const msg = getPrayerTimesForToday(timesData);
      const name = location.name_cities || location.name_areas;
      return await ctx.editMessageText(`üìç ${name}\n${msg}`, getLocationMenu(id));
    }

    // üìÖ –ú–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π)
    if (data.startsWith('month_')) {
      const id = data.split('_')[1];
      setLastLocation(userId, id);
      const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
      if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

      const timesData = loadTimesById(id);
      if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);

      const monthEn = getEnglishMonthName('now');
      const msg = getPrayerTimesTableForMonth(timesData, monthEn);
      const name = location.name_cities || location.name_areas;
      return await ctx.editMessageText(`üìç ${name}\n${msg}`, getLocationMenu(id));
    }

    // üóìÔ∏è –ì–æ–¥ ‚Üí –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
    if (data.startsWith('year_')) {
      const id = data.split('_')[1];
      setLastLocation(userId, id);
      const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
      if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

      const timesData = loadTimesById(id);
      if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);

      return await ctx.editMessageText('üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList(id));
    }

    // üìÖ –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
    if (data.startsWith('select_month_')) {
      const parts = data.split('_');
      const ruMonth = parts.slice(2, -1).join('_');
      const locationId = parts[parts.length - 1];
      const enMonth = getEnglishMonthName(ruMonth);
      if (!enMonth) return await ctx.editMessageText('‚ùå –ú–µ—Å—è—Ü –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.', getLocationMenu(locationId));

      const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == locationId);
      if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

      const timesData = loadTimesById(locationId);
      if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);

      const msg = getPrayerTimesTableForMonth(timesData, enMonth);
      const name = location.name_cities || location.name_areas;
      setLastLocation(userId, locationId);
      return await ctx.editMessageText(`üìç ${name}\n${msg}`, getLocationMenu(locationId));
    }

    // üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Å—Ç—É
    if (data.startsWith('back_to_loc_')) {
      const id = data.split('_')[3];
      const location = [...citiesAreasData.cities, ...citiesAreasData.areas].find(l => l.id == id);
      if (!location) return await ctx.editMessageText('‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

      const timesData = loadTimesById(id);
      if (!timesData) return await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', mainMenu);

      return await ctx.editMessageText(`üìç ${location.name_cities || location.name_areas}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`, getLocationMenu(id));
    }

    // üìú –•–∞–¥–∏—Å –¥–Ω—è
    if (data === 'cmd_quote') {
      const q = getRandomQuote();
      const text = `üìò –•–∞–¥–∏—Å –¥–Ω—è\n`;
      text += `‚ùù ${q.text} ‚ùû\n`;
      text += `‚Äî ${q.author}`;
      return await ctx.editMessageText(text, mainMenu);
    }

    // ‚ÑπÔ∏è –û –±–æ—Ç–µ
    if (data === 'cmd_about') {
      const text = `‚ÑπÔ∏è –û –±–æ—Ç–µ ¬´–†—É–∑–Ω–∞–º–∞¬ª\n`;
      text += `üïå –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤.\n`;
      text += `üì© –°–æ–∑–¥–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π –æ –≤–µ—Ä—É—é—â–∏—Ö.\n`;
      text += `¬© 2025 | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º`;
      return await ctx.editMessageText(text, mainMenu);
    }

    // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (data === 'cmd_stats') {
      const text = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n`;
      text += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}\n`;
      text += `üèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤: ${citiesAreasData.cities.length}\n`;
      text += `üèòÔ∏è –†–∞–π–æ–Ω–æ–≤: ${citiesAreasData.areas.length}\n`;
      text += `üïå –í—Å–µ–≥–æ –º–µ—Å—Ç: ${citiesAreasData.cities.length + citiesAreasData.areas.length}`;
      return await ctx.editMessageText(text, mainMenu);
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', err.message);
    try {
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainMenu);
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
    }
  }
});

// ========================================================
// üöÄ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò –•–ê–î–ò–°–û–í
// ========================================================
loadUsers();
loadQuotes();

// ========================================================
// ‚òÅÔ∏è Vercel Webhook
// ========================================================
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }
  try {
    const body = await new Promise((resolve, reject) => {
      let data = '';
      req.on('data', (chunk) => (data += chunk));
      req.on('end', () => resolve(data));
      req.on('error', reject);
    });
    const update = JSON.parse(body);
    await bot.handleUpdate(update);
    res.status(200).json({ ok: true });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Webhook:', e.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

// ========================================================
// üíª –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö
// ========================================================
if (process.env.NODE_ENV !== 'production') {
  bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message);
  });
}