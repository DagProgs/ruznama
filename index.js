const { Telegraf } = require('telegraf');
const quotes = require('./quotes.json');
const timesDb = require('./times_db.json');
const fs = require('fs');
const path = require('path');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

const bot = new Telegraf(BOT_TOKEN);

// –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤
const russianToEnglishMonth = {
  —è–Ω–≤–∞—Ä—å: 'January',
  —Ñ–µ–≤—Ä–∞–ª—å: 'February',
  –º–∞—Ä—Ç: 'March',
  –∞–ø—Ä–µ–ª—å: 'April',
  –º–∞–π: 'May',
  –∏—é–Ω—å: 'June',
  –∏—é–ª—å: 'July',
  –∞–≤–≥—É—Å—Ç: 'August',
  —Å–µ–Ω—Ç—è–±—Ä—å: 'September',
  –æ–∫—Ç—è–±—Ä—å: 'October',
  –Ω–æ—è–±—Ä—å: 'November',
  –¥–µ–∫–∞–±—Ä—å: 'December'
};

function getEnglishMonthName(russianNameOrNow = 'now') {
  if (russianNameOrNow === 'now') {
    const now = new Date();
    return now.toLocaleString('en-GB', { month: 'long' });
  } else {
    const lower = russianNameOrNow.toLowerCase();
    for (const [ru, en] of Object.entries(russianToEnglishMonth)) {
      if (ru === lower) return en;
    }
    return null;
  }
}

function getRussianMonthName(englishName) {
  for (const [ru, en] of Object.entries(russianToEnglishMonth)) {
    if (en === englishName) return ru;
  }
  return englishName;
}

const usersFilePath = path.join(__dirname, 'users.json');

function loadUsers() {
  try {
    if (fs.existsSync(usersFilePath)) {
      const data = fs.readFileSync(usersFilePath, 'utf8');
      return new Set(JSON.parse(data));
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
  }
  return new Set();
}

function saveUsers(users) {
  try {
    fs.writeFileSync(usersFilePath, JSON.stringify([...users]), 'utf8');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
  }
}

let users = loadUsers();

function addUser(userId) {
  const before = users.size;
  users.add(userId.toString());
  if (users.size > before) {
    saveUsers(users);
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ: ${users.size}`);
  }
}

function getUserCount() {
  return users.size;
}

function getRandomQuote() {
  const idx = Math.floor(Math.random() * quotes.length);
  return quotes[idx];
}

function getPrayerTimesForToday() {
  const now = new Date();
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const day = String(now.getDate()).padStart(2, '0');
  const monthRu = now.toLocaleString('ru-RU', { month: 'long' });
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const monthData = timesDb[monthEn];
  if (!monthData) return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—Ü–∞ "${monthEn}" –Ω–µ—Ç.`;

  const dayData = monthData[day];
  if (!dayData) return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${day} ${monthRuCap} –Ω–µ—Ç.`;

  const fmt = (arr) => `${String(arr[0]).padStart(2,'0')}:${String(arr[1]).padStart(2,'0')}`;

  return `
üìÖ ${day} ${monthRuCap}

üèô –§–∞–¥–∂—Ä: ${fmt(dayData.Fajr)}
üåÖ –í–æ—Å—Ö–æ–¥: ${fmt(dayData.Sunrise)}
üåá –ó—É—Ö—Ä: ${fmt(dayData.Dhuhr)}
üåÜ –ê—Å—Ä: ${fmt(dayData.Asr)}
üèô –ú–∞–≥—Ä–∏–±: ${fmt(dayData.Maghrib)}
üåÉ –ò—à–∞: ${fmt(dayData.Isha)}
`;
}

function getPrayerTimesTableForMonth(monthEn) {
  const monthData = timesDb[monthEn];
  if (!monthData) return `–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—Ü–∞ "${monthEn}" –Ω–µ—Ç.`;

  const monthRu = getRussianMonthName(monthEn);
  const monthRuCap = monthRu.charAt(0).toUpperCase() + monthRu.slice(1);

  const fmt = (arr) => arr && arr.length >= 2 ? `${String(arr[0]).padStart(2,'0')}:${String(arr[1]).padStart(2,'0')}` : '--:--';

  const dayW = 4;
  const timeW = 5;

  let header = `–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ ${monthRuCap}\n\n`;
  let colHeader = `<pre>` +
    '–î–µ–Ω—å'.padEnd(dayW,' ') + '‚îÇ' +
    '–§–∞–¥–∂—Ä'.padEnd(timeW,' ') + '‚îÇ' +
    '–í–æ—Å—Ö.'.padEnd(timeW,' ') + '‚îÇ' +
    '–ó—É—Ö—Ä'.padEnd(timeW,' ') + '‚îÇ' +
    '–ê—Å—Ä'.padEnd(timeW,' ') + '‚îÇ' +
    '–ú–∞–≥—Ä.'.padEnd(timeW,' ') + '‚îÇ' +
    '–ò—à–∞'.padEnd(timeW,' ') + '\n' +
    ''.padEnd(dayW + 1 + timeW*6 + 6, '‚îÄ') + '\n';

  let body = '';
  for(let d=1; d<=31; d++) {
    const dayStr = String(d).padStart(2,'0');
    const dayData = monthData[dayStr];
    let row = d.toString().padEnd(dayW,' ') + '‚îÇ';
    if(dayData) {
      row += fmt(dayData.Fajr).padEnd(timeW,' ') + '‚îÇ' +
             fmt(dayData.Sunrise).padEnd(timeW,' ') + '‚îÇ' +
             fmt(dayData.Dhuhr).padEnd(timeW,' ') + '‚îÇ' +
             fmt(dayData.Asr).padEnd(timeW,' ') + '‚îÇ' +
             fmt(dayData.Maghrib).padEnd(timeW,' ') + '‚îÇ' +
             fmt(dayData.Isha).padEnd(timeW,' ');
    } else {
      row += ''.padEnd((timeW+1)*6-1,' ');
    }
    body += row + '\n';
  }

  return header + colHeader + body + '</pre>';
}

function getMonthsList() {
  const ruMonths = Object.keys(russianToEnglishMonth);
  const keyboard = [];
  for(let i=0; i<ruMonths.length; i+=3) {
    const row = ruMonths.slice(i,i+3).map(m => ({
      text: m.charAt(0).toUpperCase() + m.slice(1),
      callback_data: `month_${m}`
    }));
    keyboard.push(row);
  }
  return { reply_markup: { inline_keyboard: keyboard } };
}

const inlineMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üïå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è /day', callback_data: 'cmd_day' },
        { text: 'üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü /month', callback_data: 'cmd_month' }
      ],
      [
        { text: 'üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü /year', callback_data: 'cmd_year' },
        { text: 'üí¨ –ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ /newquote', callback_data: 'cmd_newquote' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /stats', callback_data: 'cmd_stats' },
        { text: '‚ÑπÔ∏è About /about', callback_data: 'cmd_about' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å /help', callback_data: 'cmd_help' }
      ]
    ]
  }
};

bot.start((ctx) => {
  addUser(ctx.from.id);
  const welcome = `
üìÖ‚è∞ –†—É–∑–Ω–∞–º–∞ - –ö—É—Ä–∞—Ö—Å–∫–∏–π —Ä–∞–π–æ–Ω

¬´–°–∞–º–æ–µ –ª—É—á—à–µ–µ –¥–µ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–º–∞–∑, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª. (–¢–∏—Ä–º–∏–∑–∏ –∏ –∞–ª—å-–•–∞–∫–∏–º)

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:
  `;
  ctx.reply(welcome, inlineMenu);
});

bot.help((ctx) => {
  addUser(ctx.from.id);
  ctx.reply(`üìñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.`, inlineMenu);
});

bot.command('about', (ctx) => {
  addUser(ctx.from.id);
  ctx.reply(`
ü§ñ –†—É–∑–Ω–∞–º–∞ –ë–æ—Ç v1.1
üïå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
  `, inlineMenu);
});

bot.command('stats', (ctx) => {
  addUser(ctx.from.id);
  ctx.reply(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –ú–µ—Å—è—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤: ${Object.keys(timesDb).length}
  `, inlineMenu);
});

bot.command('newquote', (ctx) => {
  addUser(ctx.from.id);
  const q = getRandomQuote();
  ctx.reply(`‚ùù ${q.text} ‚ùû\n\n‚Äî ${q.author}`, inlineMenu);
});

bot.command('day', (ctx) => {
  addUser(ctx.from.id);
  const msg = getPrayerTimesForToday();
  ctx.reply(msg, { parse_mode: 'HTML', ...inlineMenu });
});

bot.command('month', (ctx) => {
  addUser(ctx.from.id);
  const now = new Date();
  const monthEn = now.toLocaleString('en-GB', { month: 'long' });
  const msg = getPrayerTimesTableForMonth(monthEn);
  ctx.reply(msg, { parse_mode: 'HTML', ...inlineMenu });
});

bot.command('year', (ctx) => {
  addUser(ctx.from.id);
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList());
});

bot.on('text', (ctx) => {
  addUser(ctx.from.id);
  ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.', inlineMenu);
});

bot.on('callback_query', async (ctx) => {
  addUser(ctx.callbackQuery.from.id);
  const data = ctx.callbackQuery.data;

  try {
    if (data === 'cmd_day') {
      await ctx.answerCbQuery();
      const msg = getPrayerTimesForToday();
      await ctx.editMessageText(msg, { parse_mode: 'HTML', ...inlineMenu });
    } else if (data === 'cmd_month') {
      await ctx.answerCbQuery();
      const now = new Date();
      const monthEn = now.toLocaleString('en-GB', { month: 'long' });
      const msg = getPrayerTimesTableForMonth(monthEn);
      await ctx.editMessageText(msg, { parse_mode: 'HTML', ...inlineMenu });
    } else if (data === 'cmd_year') {
      await ctx.answerCbQuery();
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', getMonthsList());
    } else if (data === 'cmd_newquote') {
      await ctx.answerCbQuery();
      const q = getRandomQuote();
      const msg = `‚ùù ${q.text} ‚ùû\n\n‚Äî ${q.author}`;
      await ctx.editMessageText(msg, inlineMenu);
    } else if (data === 'cmd_stats') {
      await ctx.answerCbQuery();
      const msg = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}
üìö –¶–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${quotes.length}
üïå –ú–µ—Å—è—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞–º–∞–∑–æ–≤: ${Object.keys(timesDb).length}
      `;
      await ctx.editMessageText(msg, inlineMenu);
    } else if (data === 'cmd_about') {
      await ctx.answerCbQuery();
      const msg = `
ü§ñ –†—É–∑–Ω–∞–º–∞ –ë–æ—Ç v1.0
üïå –í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
üìö –•–∞–¥–∏—Å –≤ –±–∞–∑–µ: ${quotes.length}
      `;
      await ctx.editMessageText(msg, inlineMenu);
    } else if (data === 'cmd_help') {
      await ctx.answerCbQuery();
      await ctx.editMessageText(`üìñ –¶–∏—Ç–∞—Ç–Ω—ã–π –ë–æ—Ç\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.`, inlineMenu);
    } else if (data.startsWith('month_')) {
      const ruMonth = data.split('_')[1];
      const enMonth = getEnglishMonthName(ruMonth);
      if (!enMonth) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
        return;
      }
      const msg = getPrayerTimesTableForMonth(enMonth);
      await ctx.answerCbQuery();
      await ctx.editMessageText(msg, { parse_mode: 'HTML', ...inlineMenu });
    } else {
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', { show_alert: true });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ callback_query:', e);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã Telegram
bot.telegram.setMyCommands([
  { command: 'day', description: '–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üïå' },
  { command: 'month', description: '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü' },
  { command: 'year', description: '–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü' },
  { command: 'newquote', description: '–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞' },
  { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞' },
  { command: 'about', description: '–û –±–æ—Ç–µ' },
  { command: 'help', description: '–ü–æ–º–æ—â—å' }
]);

// –í–µ–±—Ö—É–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('OK');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ update:', e);
    res.status(500).send('Error');
  }
};

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if (process.env.NODE_ENV !== 'production') {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${getUserCount()}`);
}
